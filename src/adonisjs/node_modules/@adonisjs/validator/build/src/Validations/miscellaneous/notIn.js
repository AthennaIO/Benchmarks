"use strict";
/*
 * @adonisjs/validator
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.notIn = void 0;
const luxon_1 = require("luxon");
const helpers_1 = require("../../Validator/helpers");
const RULE_NAME = 'notIn';
const DEFAULT_MESSAGE = 'notIn validation failed';
const VERIFIERS = {
    string(value, values) {
        if (typeof value !== 'string') {
            return true;
        }
        return !values.includes(value);
    },
    number(value, values) {
        if (typeof value !== 'number') {
            return true;
        }
        return !values.includes(value);
    },
    array(value, values) {
        if (!Array.isArray(value)) {
            return true;
        }
        return !value.find((one) => values.includes(one));
    },
    date(value, values) {
        if (luxon_1.DateTime.isDateTime(value) === false) {
            return true;
        }
        const isoDate = value.toISODate();
        if (!isoDate) {
            return true;
        }
        return !values.includes(isoDate);
    },
};
/**
 * Ensure the value is one of the defined choices
 */
exports.notIn = {
    compile: (0, helpers_1.wrapCompile)(RULE_NAME, ['string', 'number', 'array', 'date'], ([values], _, subtype) => {
        /**
         * Choices are defined as a ref
         */
        if ((0, helpers_1.isRef)(values)) {
            return {
                compiledOptions: { ref: values.key, subtype },
            };
        }
        /**
         * Ensure value is an array or a ref
         */
        if (!values || !Array.isArray(values)) {
            throw new Error(`"${RULE_NAME}": expects an array of "notIn values" or a "ref"`);
        }
        return { compiledOptions: { values, subtype } };
    }),
    validate(value, compiledOptions, { errorReporter, pointer, arrayExpressionPointer, refs }) {
        let values = [];
        /**
         * Resolve values from the ref or use as it is, if defined as an array
         */
        if (compiledOptions.ref) {
            const runtimevalues = refs[compiledOptions.ref].value;
            (0, helpers_1.enforceArray)(runtimevalues, `"${RULE_NAME}": expects "refs.${compiledOptions.ref}" to be an array`);
            values = runtimevalues;
        }
        else if (compiledOptions.values) {
            values = compiledOptions.values;
        }
        /**
         * Validation
         */
        if (!VERIFIERS[compiledOptions.subtype](value, values)) {
            errorReporter.report(pointer, RULE_NAME, DEFAULT_MESSAGE, arrayExpressionPointer, {
                values,
            });
        }
    },
};
