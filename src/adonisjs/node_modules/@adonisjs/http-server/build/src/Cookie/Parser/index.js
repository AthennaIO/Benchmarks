"use strict";
/**
 * @adonisjs/http-server
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CookieParser = void 0;
const cookie_1 = __importDefault(require("cookie"));
const Client_1 = require("../Client");
/**
 * Cookie parser parses the HTTP `cookie` header and collects all cookies
 * inside an object of `key-value` pair, but doesn't attempt to decrypt
 * or unsign or decode the individual values.
 *
 * The cookie values are lazily decrypted, or unsigned to avoid unncessary
 * processing, which infact can be used as a means to burden the server
 * by sending too many cookies which even doesn't belongs to the
 * server.
 */
class CookieParser {
    constructor(cookieHeader, encryption) {
        this.cookieHeader = cookieHeader;
        this.encryption = encryption;
        this.client = new Client_1.CookieClient(this.encryption);
        /**
         * A copy of cached cookies, they are cached during a request after
         * initial decoding, unsigning or decrypting.
         */
        this.cachedCookies = {
            signedCookies: {},
            plainCookies: {},
            encryptedCookies: {},
        };
        /**
         * An object of key-value pair collected by parsing
         * the request cookie header.
         */
        this.cookies = this.parse();
    }
    /**
     * Parses the request `cookie` header
     */
    parse() {
        /*
         * Set to empty object when cookie header is empty string
         */
        if (!this.cookieHeader) {
            return {};
        }
        /*
         * Parse and store reference
         */
        return cookie_1.default.parse(this.cookieHeader);
    }
    /**
     * Attempts to decode a cookie by the name. When calling this method,
     * you are assuming that the cookie was just encoded at the first
     * place and not signed or encrypted.
     */
    decode(key) {
        /*
         * Ignore when initial value is not defined or null
         */
        const value = this.cookies[key];
        if (value === null || value === undefined) {
            return null;
        }
        /*
         * Reference to the cache object. Mainly done to avoid typos,
         * since this object is referenced a handful of times inside
         * this method.
         */
        const cacheObject = this.cachedCookies.plainCookies;
        /*
         * Return from cache, when already parsed
         */
        if (cacheObject[key] !== undefined) {
            return cacheObject[key];
        }
        /*
         * Attempt to unpack and cache it for future. The value is only
         * when value it is not null.
         */
        const parsed = this.client.decode(key, value);
        if (parsed !== null) {
            cacheObject[key] = parsed;
        }
        return parsed;
    }
    /**
     * Attempts to unsign a cookie by the name. When calling this method,
     * you are assuming that the cookie was signed at the first place.
     */
    unsign(key) {
        /*
         * Ignore when initial value is not defined or null
         */
        const value = this.cookies[key];
        if (value === null || value === undefined) {
            return null;
        }
        /*
         * Reference to the cache object. Mainly done to avoid typos,
         * since this object is referenced a handful of times inside
         * this method.
         */
        const cacheObject = this.cachedCookies.signedCookies;
        /*
         * Return from cache, when already parsed
         */
        if (cacheObject[key] !== undefined) {
            return cacheObject[key];
        }
        /*
         * Attempt to unpack and cache it for future. The value is only
         * when value it is not null.
         */
        const parsed = this.client.unsign(key, value);
        if (parsed !== null) {
            cacheObject[key] = parsed;
        }
        return parsed;
    }
    /**
     * Attempts to decrypt a cookie by the name. When calling this method,
     * you are assuming that the cookie was encrypted at the first place.
     */
    decrypt(key) {
        /*
         * Ignore when initial value is not defined or null
         */
        const value = this.cookies[key];
        if (value === null || value === undefined) {
            return null;
        }
        /*
         * Reference to the cache object. Mainly done to avoid typos,
         * since this object is referenced a handful of times inside
         * this method.
         */
        const cacheObject = this.cachedCookies.encryptedCookies;
        /*
         * Return from cache, when already parsed
         */
        if (cacheObject[key] !== undefined) {
            return cacheObject[key];
        }
        /*
         * Attempt to unpack and cache it for future. The value is only
         * when value it is not null.
         */
        const parsed = this.client.decrypt(key, value);
        if (parsed !== null) {
            cacheObject[key] = parsed;
        }
        return parsed;
    }
    /**
     * Returns an object of cookies key-value pair. Do note, the
     * cookies are not decoded, unsigned or decrypted inside this
     * list.
     */
    list() {
        return this.cookies;
    }
}
exports.CookieParser = CookieParser;
