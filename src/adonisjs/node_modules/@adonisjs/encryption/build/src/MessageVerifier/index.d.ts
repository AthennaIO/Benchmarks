/// <reference path="../../adonis-typings/encryption.d.ts" />
import { MessageVerifierContract } from '@ioc:Adonis/Core/Encryption';
/**
 * Message verifier is similar to the encryption. However, the actual payload
 * is not encrypted and just base64 encoded. This is helpful when you are
 * not concerned about the confidentiality of the data, but just want to
 * make sure that is not tampered after encoding.
 */
export declare class MessageVerifier implements MessageVerifierContract {
    private secret;
    /**
     * The key for signing and encrypting values. It is derived
     * from the user provided secret.
     */
    private cryptoKey;
    /**
     * Use `dot` as a separator for joining encrypted value, iv and the
     * hmac hash. The idea is borrowed from JWT's in which each part
     * of the payload is concatenated with a dot.
     */
    private separator;
    constructor(secret: string);
    /**
     * Signs a value with the secret key. The signed value is not encrypted, but just
     * signed for avoiding tampering to the original message.
     *
     * Any `JSON.stringify` valid value is accepted by this method.
     */
    sign(value: any, expiresAt?: string | number, purpose?: string): string;
    /**
     * Unsign a previously signed value with an optional purpose
     */
    unsign<T extends any>(value: string, purpose?: string): null | T;
}
