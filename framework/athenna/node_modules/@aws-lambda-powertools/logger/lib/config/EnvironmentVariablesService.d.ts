import { ConfigServiceInterface } from './ConfigServiceInterface';
import { EnvironmentVariablesService as CommonEnvironmentVariablesService } from '@aws-lambda-powertools/commons';
/**
 * Class EnvironmentVariablesService
 *
 * This class is used to return environment variables that are available in the runtime of
 * the current Lambda invocation.
 * These variables can be a mix of runtime environment variables set by AWS and
 * variables that can be set by the developer additionally.
 *
 * @class
 * @extends {CommonEnvironmentVariablesService}
 * @implements {ConfigServiceInterface}
 * @see https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime
 * @see https://docs.powertools.aws.dev/lambda/typescript/latest/#environment-variables
 */
declare class EnvironmentVariablesService extends CommonEnvironmentVariablesService implements ConfigServiceInterface {
    private awsLogLevelVariable;
    private awsRegionVariable;
    private currentEnvironmentVariable;
    private functionNameVariable;
    private functionVersionVariable;
    private logEventVariable;
    private logLevelVariable;
    private logLevelVariableLegacy;
    private memoryLimitInMBVariable;
    private sampleRateValueVariable;
    /**
     * It returns the value of the `AWS_LAMBDA_LOG_LEVEL` environment variable.
     *
     * The `AWS_LAMBDA_LOG_LEVEL` environment variable is set by AWS Lambda when configuring
     * the function's log level using the Advanced Logging Controls feature. This value always
     * takes precedence over other means of configuring the log level.
     *
     * @note we need to map the `FATAL` log level to `CRITICAL`, see {@link https://docs.aws.amazon.com/lambda/latest/dg/configuration-logging.html#configuration-logging-log-levels AWS Lambda Log Levels}.
     *
     * @returns {string}
     */
    getAwsLogLevel(): string;
    /**
     * It returns the value of the AWS_REGION environment variable.
     *
     * @returns {string}
     */
    getAwsRegion(): string;
    /**
     * It returns the value of the ENVIRONMENT environment variable.
     *
     * @returns {string}
     */
    getCurrentEnvironment(): string;
    /**
     * It returns the value of the AWS_LAMBDA_FUNCTION_MEMORY_SIZE environment variable.
     *
     * @returns {string}
     */
    getFunctionMemory(): number;
    /**
     * It returns the value of the AWS_LAMBDA_FUNCTION_NAME environment variable.
     *
     * @returns {string}
     */
    getFunctionName(): string;
    /**
     * It returns the value of the AWS_LAMBDA_FUNCTION_VERSION environment variable.
     *
     * @returns {string}
     */
    getFunctionVersion(): string;
    /**
     * It returns the value of the POWERTOOLS_LOGGER_LOG_EVENT environment variable.
     *
     * @returns {boolean}
     */
    getLogEvent(): boolean;
    /**
     * It returns the value of the `POWERTOOLS_LOG_LEVEL, or `LOG_LEVEL` (legacy) environment variables
     * when the first one is not set.
     *
     * @note The `LOG_LEVEL` environment variable is considered legacy and will be removed in a future release.
     * @note The `AWS_LAMBDA_LOG_LEVEL` environment variable always takes precedence over the ones above.
     *
     * @returns {string}
     */
    getLogLevel(): string;
    /**
     * It returns the value of the POWERTOOLS_LOGGER_SAMPLE_RATE environment variable.
     *
     * @returns {string|undefined}
     */
    getSampleRateValue(): number | undefined;
}
export { EnvironmentVariablesService };
//# sourceMappingURL=EnvironmentVariablesService.d.ts.map