import { Logger } from '../Logger';
import { HandlerOptions } from '../types';
import type { MiddlewareLikeObj } from '@aws-lambda-powertools/commons';
/**
 * A middy middleware that helps emitting CloudWatch EMF metrics in your logs.
 *
 * Using this middleware on your handler function will automatically add context information to logs, as well as optionally log the event and clear attributes set during the invocation.
 *
 * @example
 * ```typescript
 * import { Logger, injectLambdaContext } from '@aws-lambda-powertools/logger';
 * import middy from '@middy/core';
 *
 *
 * const logger = new Logger();
 *
 * const lambdaHandler = async (_event: any, _context: any) => {
 *     logger.info('This is an INFO log with some context');
 * };
 *
 * export const handler = middy(lambdaHandler).use(injectLambdaContext(logger));
 * ```
 *
 * @param target - The Logger instance(s) to use for logging
 * @param options - (_optional_) Options for the middleware
 * @returns - The middy middleware object
 */
declare const injectLambdaContext: (target: Logger | Logger[], options?: HandlerOptions) => MiddlewareLikeObj;
export { injectLambdaContext };
//# sourceMappingURL=middy.d.ts.map