"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addUserAgentMiddleware = exports.customUserAgentMiddleware = void 0;
const version_1 = require("../version");
const utils_1 = require("./utils");
/**
 * @internal
 */
const EXEC_ENV = process.env.AWS_EXECUTION_ENV || 'NA';
const middlewareOptions = {
    relation: 'after',
    toMiddleware: 'getUserAgentMiddleware',
    name: 'addPowertoolsToUserAgent',
    tags: ['POWERTOOLS', 'USER_AGENT'],
};
/**
 * @internal
 * returns a middleware function for the MiddlewareStack, that can be used for the SDK clients
 * @param feature
 */
const customUserAgentMiddleware = (feature) => {
    return (next) => async (args) => {
        const powertoolsUserAgent = `PT/${feature}/${version_1.PT_VERSION} PTEnv/${EXEC_ENV}`;
        args.request.headers['user-agent'] =
            `${args.request.headers['user-agent']} ${powertoolsUserAgent}`;
        return await next(args);
    };
};
exports.customUserAgentMiddleware = customUserAgentMiddleware;
/**
 * @internal
 * Checks if the middleware stack already has the Powertools UA middleware
 */
const hasPowertools = (middlewareStack) => {
    let found = false;
    for (const middleware of middlewareStack) {
        if (middleware.includes('addPowertoolsToUserAgent')) {
            found = true;
        }
    }
    return found;
};
const addUserAgentMiddleware = (client, feature) => {
    try {
        if ((0, utils_1.isSdkClient)(client)) {
            if (hasPowertools(client.middlewareStack.identify())) {
                return;
            }
            client.middlewareStack.addRelativeTo(customUserAgentMiddleware(feature), middlewareOptions);
        }
        else {
            throw new Error(`The client provided does not match the expected interface`);
        }
    }
    catch (error) {
        console.warn('Failed to add user agent middleware', error);
    }
};
exports.addUserAgentMiddleware = addUserAgentMiddleware;
