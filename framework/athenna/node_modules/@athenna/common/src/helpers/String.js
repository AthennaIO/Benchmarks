/**
 * @athenna/common
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import pluralize from 'pluralize';
import * as changeCase from 'change-case';
import { randomBytes } from 'crypto';
import { OrdinalNanException } from '#src/exceptions/OrdinalNanException';
export class String {
    /**
     * Generate random string by size.
     */
    static generateRandom(size) {
        const bits = (size + 1) * 6;
        const buffer = randomBytes(Math.ceil(bits / 8));
        return String.normalizeBase64(buffer.toString('base64')).slice(0, size);
    }
    /**
     * Generate random color in hexadecimal format.
     */
    static generateRandomColor() {
        return `#${((Math.random() * 0xffffff) << 0).toString(16)}`;
    }
    /**
     * Normalizes the string in base64 format removing
     * special chars.
     */
    static normalizeBase64(value) {
        return value.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
    }
    /**
     * Transforms the string to "camelCase".
     */
    static toCamelCase(value) {
        return changeCase.camelCase(value);
    }
    /**
     * Transforms the string to "snake_case".
     */
    static toSnakeCase(value, capitalize) {
        if (capitalize) {
            return changeCase.snakeCase(value, {
                transform: changeCase.capitalCaseTransform
            });
        }
        return changeCase.snakeCase(value);
    }
    /**
     * Transforms the string to "CONSTANT_CASE".
     */
    static toConstantCase(value) {
        return changeCase.constantCase(value);
    }
    /**
     * Transforms the string to "PascalCase".
     */
    static toPascalCase(value) {
        return changeCase.pascalCase(value);
    }
    /**
     * Transforms the string to "Sentence case".
     */
    static toSentenceCase(value, capitalize) {
        if (capitalize) {
            return changeCase.capitalCase(value);
        }
        return changeCase.sentenceCase(value);
    }
    /**
     * Transforms the string to "dot.case".
     */
    static toDotCase(value, capitalize) {
        if (capitalize) {
            return changeCase.dotCase(value, {
                transform: changeCase.capitalCaseTransform
            });
        }
        return changeCase.dotCase(value);
    }
    /**
     * Removes all sorted cases from string.
     */
    static toNoCase(value) {
        return changeCase.noCase(value);
    }
    /**
     * Transforms a string to "dash-case"
     */
    static toDashCase(value, capitalize) {
        if (capitalize) {
            return changeCase.headerCase(value);
        }
        return changeCase.paramCase(value);
    }
    /**
     * Transforms a word to plural
     */
    static pluralize(word) {
        return pluralize.plural(word);
    }
    /**
     * Transforms a word to singular.
     */
    static singularize(word) {
        return pluralize.singular(word);
    }
    /**
     * Transforms a number to your ordinal format.
     */
    static ordinalize(value) {
        const transformedValue = Math.abs(typeof value === 'string' ? parseInt(value) : value);
        if (!Number.isFinite(transformedValue) || Number.isNaN(transformedValue)) {
            throw new OrdinalNanException();
        }
        const percent = transformedValue % 100;
        if (percent >= 10 && percent <= 20) {
            return `${value}th`;
        }
        const decimal = transformedValue % 10;
        switch (decimal) {
            case 1:
                return `${value}st`;
            case 2:
                return `${value}nd`;
            case 3:
                return `${value}rd`;
            default:
                return `${value}th`;
        }
    }
}
