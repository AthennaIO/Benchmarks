/**
 * @athenna/common
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import type { StreamOptions } from 'node:stream';
import type { FileJson, ObjectBuilderOptions } from '#src/types';
import { ReadStream, WriteStream } from 'node:fs';
import { ObjectBuilder } from '#src/helpers/Json';
export declare class File {
    /**
     * The original or faked file directory.
     */
    dir: string;
    /**
     * The original or faked file name.
     */
    name: string;
    /**
     * The original or faked file base.
     */
    base: string;
    /**
     * The original or faked file path.
     */
    path: string;
    /**
     * The original or faked href path.
     */
    href: string;
    /**
     * The file mime type.
     */
    mime: string;
    /**
     * Set if original or fake file exists.
     */
    fileExists: boolean;
    /**
     * Date when the file was created.
     */
    createdAt: Date;
    /**
     * Date when the file was last accessed.
     */
    accessedAt: Date;
    /**
     * Date when the file was last modified.
     */
    modifiedAt: Date;
    /**
     * The file size.
     */
    fileSize: string;
    /**
     * The file extension.
     */
    extension: string;
    /**
     * Set if file is a copy or not.
     */
    isCopy: boolean;
    /**
     * Original file directory.
     */
    originalDir: string;
    /**
     * Original file name.
     */
    originalName: string;
    /**
     * Original file base.
     */
    originalBase: string;
    /**
     * Original file path.
     */
    originalPath: string;
    /**
     * Original file href.
     */
    originalHref: string;
    /**
     * Set if original file exists.
     */
    originalFileExists: boolean;
    /**
     * The file content as Buffer.
     */
    content: Buffer;
    constructor(filePath: string, content?: string | Buffer, mockedValues?: boolean, isCopy?: boolean);
    /**
     * Remove the file it's existing or not.
     */
    static safeRemove(filePath: string): Promise<void>;
    /**
     * Verify if file exists.
     */
    static existsSync(filePath: string): boolean;
    /**
     * Verify if file exists.
     */
    static exists(filePath: string): Promise<boolean>;
    /**
     * Verify if path is from file or directory.
     */
    static isFileSync(path: string): boolean;
    /**
     * Verify if path is from file or directory.
     */
    static isFile(path: string): Promise<boolean>;
    /**
     * Create fake file with determined size.
     */
    static createFileOfSize(filePath: string, size: number): Promise<typeof File>;
    /**
     * Parse the file path.
     */
    private static parsePath;
    /**
     * Returns the file as a JSON object.
     */
    toJSON(): FileJson;
    /**
     * Load or create the file.
     */
    loadSync(options?: {
        withContent?: boolean;
        isInternalLoad?: boolean;
    }): File;
    /**
     * Load or create the file.
     */
    load(options?: {
        withContent?: boolean;
        isInternalLoad?: boolean;
    }): Promise<File>;
    /**
     * Remove the file.
     */
    removeSync(): void;
    /**
     * Remove the file.
     */
    remove(): Promise<void>;
    /**
     * Create a copy of the file.
     */
    copySync(path: string, options?: {
        withContent?: boolean;
        mockedValues?: boolean;
    }): File;
    /**
     * Create a copy of the file.
     */
    copy(path: string, options?: {
        withContent?: boolean;
        mockedValues?: boolean;
    }): Promise<File>;
    /**
     * Move the file to another path.
     */
    moveSync(path: string, options?: {
        withContent?: boolean;
        mockedValues?: boolean;
    }): File;
    /**
     * Move the file to other path.
     */
    move(path: string, options?: {
        withContent?: boolean;
        mockedValues?: boolean;
    }): Promise<File>;
    /**
     * Append any data to the file.
     */
    appendSync(data: string | Buffer): File;
    /**
     * Append any data to the file.
     */
    append(data: string | Buffer): Promise<File>;
    /**
     * Prepend any data to the file.
     */
    prependSync(data: string | Buffer): File;
    /**
     * Prepend any data to the file.
     */
    prepend(data: string | Buffer): Promise<File>;
    /**
     * Set content in file overwriting all his content.
     */
    setContent(content: string | Buffer, options?: {
        withContent?: boolean;
    }): Promise<File>;
    /**
     * Set content in file overwriting all his content.
     */
    setContentSync(content: string | Buffer, options?: {
        withContent?: boolean;
    }): File;
    /**
     * Get only the content of the file.
     */
    getContent(options?: {
        saveContent?: boolean;
    }): Promise<Buffer>;
    /**
     * Get only the content of the file.
     */
    getContentSync(options?: {
        saveContent?: boolean;
    }): Buffer;
    /**
     * Get only the content of the file as string.
     */
    getContentAsString(options?: {
        saveContent?: boolean;
    }): Promise<string>;
    /**
     * Get only the content of the file as string.
     */
    getContentAsStringSync(options?: {
        saveContent?: boolean;
    }): string;
    /**
     * Get only the content of the file as json.
     */
    getContentAsJson(options?: {
        saveContent?: boolean;
    }): Promise<any | any[]>;
    /**
     * Get only the content of the file as json.
     */
    getContentAsJsonSync(options?: {
        saveContent?: boolean;
    }): any | any[];
    /**
     * Get only the content of the file as yaml.
     */
    getContentAsYaml(options?: {
        saveContent?: boolean;
    }): Promise<any | any[]>;
    /**
     * Get only the content of the file as yaml.
     */
    getContentAsYamlSync(options?: {
        saveContent?: boolean;
    }): any | any[];
    /**
     * Get only the content of the file as an instance of ObjectBuilder.
     */
    getContentAsBuilder(options?: {
        saveContent?: boolean;
        builder?: ObjectBuilderOptions;
    }): Promise<ObjectBuilder>;
    /**
     * Get only the content of the file as an instance of ObjectBuilder.
     */
    getContentAsBuilderSync(options?: {
        saveContent?: boolean;
        builder?: ObjectBuilderOptions;
    }): ObjectBuilder;
    /**
     * Create a readable stream of the file.
     */
    createReadStream(options?: BufferEncoding | StreamOptions<any>): ReadStream;
    /**
     * Create a writable stream of the file.
     */
    createWriteStream(options?: BufferEncoding | StreamOptions<any>): WriteStream;
    /**
     * Import the file assuming that the file is a valid module.
     */
    import(meta?: string): Promise<any>;
    /**
     * Safe import the file assuming that the file COULD be a valid module.
     */
    safeImport(meta?: string): Promise<any | null>;
    /**
     * Create file values.
     */
    private createFileValues;
}
