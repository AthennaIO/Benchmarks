/**
 * @athenna/common
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
/// <reference types="node" resolution-mode="require"/>
import bytes from 'bytes';
import csvParser from 'csv-parser';
import { Options } from '#src/helpers/Options';
import { ObjectBuilder } from '#src/helpers/Json';
import type { ObjectBuilderOptions } from '#src/types';
import { type Json2CsvOptions, type Csv2JsonOptions } from 'json-2-csv';
export declare class Parser {
    /**
     * Parse using Node.js streams, useful for
     * parsing multiple values in files.
     */
    static stream(): {
        /**
         * Parse a csv chunk to an array of json objects.
         */
        csvToArray: (options?: csvParser.Options | string[]) => import("stream").Transform;
    };
    /**
     * Parse a string to array.
     */
    static stringToArray(string: string, separator: string): string[];
    /**
     * Parse an array of strings to a string.
     */
    static arrayToString(values: string[], options?: {
        separator?: string;
        pairSeparator?: string;
        lastSeparator?: string;
    }): string;
    /**
     * Parse a string to number or Coordinate.
     */
    static stringToNumber(string: string, isCoordinate?: boolean): number;
    /**
     * Parse an object to form data.
     */
    static jsonToFormData(object: any): string;
    /**
     * Parse form data to json.
     */
    static formDataToJson(formData: string): any;
    /**
     * Parse object to yaml string.
     */
    static objectToYamlString(object: any): string;
    /**
     * Parse yaml string to object.
     */
    static yamlStringToObject(text: string): any;
    /**
     * Parses all links inside the string to HTML link
     * with <a href= .../>.
     */
    static linkToHref(string: string): string;
    /**
     * Parses a number to Byte format.
     */
    static sizeToByte(value: number, options?: bytes.BytesOptions): string;
    /**
     * Parses a byte format to number.
     */
    static byteToSize(byte: string | number): number;
    /**
     * Parses a string to MS format.
     */
    static timeToMs(value: string): number;
    /**
     * Parses an MS number to time format.
     */
    static msToTime(value: number, long?: boolean): string;
    /**
     * Parses a json to a csv string.
     */
    static arrayToCsv(values: any[], options?: Json2CsvOptions): string;
    /**
     * Parses a csv string to an array of json objects.
     */
    static csvToArray(value: string, options?: Csv2JsonOptions): object[];
    /**
     * Parses the status code number to it reason in string.
     */
    static statusCodeToReason(status: string | number): string;
    /**
     * Parses the reason in string to it status code number
     */
    static reasonToStatusCode(reason: string): number;
    /**
     * Parses the database connection url to connection object.
     */
    static dbUrlToConnectionObj(url: string): {
        protocol: string;
        user?: string;
        password?: string;
        host: string | string[];
        port?: number;
        database: string;
        options?: any;
    };
    /**
     * Parses the database connection object to connection url.
     */
    static connectionObjToDbUrl(object: {
        protocol: string;
        url?: string;
        user?: string;
        password?: string;
        host: string | string[];
        port?: number;
        database: string;
        options?: any;
    }): string;
    /**
     * Parse an object to an ObjectBuilder.
     */
    static objectToBuilder(object: Record<string, any>, options?: ObjectBuilderOptions): ObjectBuilder;
    /**
     * Parse an entire array of objects to an array of ObjectBuilder.
     */
    static arrayObjectToArrayBuilder(objects: Record<string, any>[], options?: ObjectBuilderOptions): ObjectBuilder[];
}
