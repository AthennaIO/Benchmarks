/**
 * @athenna/common
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { format } from 'node:util';
import { Is } from '#src/helpers/Is';
import { Chalk } from 'chalk';
export class Color {
    /**
     * Chalk instance.
     */
    static { this.chalk = new Chalk(); }
    /**
     * Paint as bold.
     */
    static get bold() {
        return Color.chalk.bold;
    }
    /**
     * Paint as dim.
     */
    static get dim() {
        return Color.chalk.dim;
    }
    /**
     * Paint as italic.
     */
    static get italic() {
        return Color.chalk.italic;
    }
    /**
     * Paint as underline.
     */
    static get underline() {
        return Color.chalk.underline;
    }
    /**
     * Paint as inverse.
     */
    static get inverse() {
        return Color.chalk.inverse;
    }
    /**
     * Paint as strikethrough.
     */
    static get strikethrough() {
        return Color.chalk.strikethrough;
    }
    /**
     * Paint as black.
     */
    static get black() {
        return Color.chalk.black;
    }
    /**
     * Paint as gray.
     */
    static get gray() {
        return Color.chalk.gray;
    }
    /**
     * Paint as purple.
     */
    static get purple() {
        return Color.chalk.hex('#7628c8');
    }
    /**
     * Paint as yellow.
     */
    static get yellow() {
        return Color.chalk.yellow;
    }
    /**
     * Paint as cyan.
     */
    static get cyan() {
        return Color.chalk.cyan;
    }
    /**
     * Paint as white.
     */
    static get white() {
        return Color.chalk.white;
    }
    /**
     * Paint as orange.
     */
    static get orange() {
        return Color.chalk.hex('#f18b0e');
    }
    /**
     * Paint as green.
     */
    static get green() {
        return Color.chalk.green;
    }
    /**
     * Paint as red.
     */
    static get red() {
        return Color.chalk.red;
    }
    /**
     * Paint debugs.
     */
    static get trace() {
        return this.gray;
    }
    /**
     * Paint debugs.
     */
    static get debug() {
        return this.purple;
    }
    /**
     * Paint infos.
     */
    static get info() {
        return this.cyan;
    }
    /**
     * Paint success.
     */
    static get success() {
        return this.green;
    }
    /**
     * Paint warning.
     */
    static get warn() {
        return this.orange;
    }
    /**
     * Paint error.
     */
    static get error() {
        return this.red;
    }
    /**
     * Paint fatal.
     */
    static get fatal() {
        return Color.chalk.bgRed;
    }
    /**
     * Paint http method.
     */
    static get GET() {
        return Color.chalk.bgHex('#7628c8').bold;
    }
    /**
     * Paint http method.
     */
    static get HEAD() {
        return Color.chalk.bgCyan.bold;
    }
    /**
     * Paint http method.
     */
    static get PUT() {
        return Color.chalk.bgHex('#f18b0e').bold;
    }
    /**
     * Paint http method.
     */
    static get PATCH() {
        return Color.chalk.bgYellow.bold;
    }
    /**
     * Paint http method.
     */
    static get POST() {
        return Color.chalk.bgGreen.bold;
    }
    /**
     * Paint http method.
     */
    static get DELETE() {
        return Color.chalk.bgRed.bold;
    }
    /**
     * Paint http method.
     */
    static get OPTIONS() {
        return Color.chalk.bgCyan.bold;
    }
    /**
     * Get the color by status code.
     */
    static statusCode(statusCode) {
        if (statusCode >= 200 && statusCode < 300) {
            return Color.chalk.bgGreen.bold(` ${statusCode} `);
        }
        if (statusCode >= 300 && statusCode < 400) {
            return Color.chalk.bgCyan.bold(` ${statusCode} `);
        }
        if (statusCode >= 400 && statusCode < 500) {
            return Color.chalk.bgHex('#f18b0e').bold(` ${statusCode} `);
        }
        if (statusCode >= 500) {
            return Color.chalk.bgRed.bold(` ${statusCode} `);
        }
        return Color.chalk.bgGray.bold(` ${statusCode} `);
    }
    /**
     * Remove all colors and special chars of string.
     */
    static removeColors(value) {
        return Color.chalk.reset(value).replace(
        // eslint-disable-next-line no-control-regex
        /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');
    }
    /**
     * Remove all colors and special chars of string.
     */
    static remove(value) {
        return Color.removeColors(value);
    }
    /**
     * Paint by the http method.
     */
    static httpMethod(method) {
        return this[method](` ${method} `);
    }
    /**
     * Applies the engine to execute chalk methods inside string.
     *
     * @example
     * ```ts
     * const message = Color.apply('The file ({yellow, bold} "app/services/Service") has been created.')
     *
     * console.log(message)
     * ```
     * Output:
     * ```bash
     * The file "app/services/Service" has been created.
     * ```
     */
    static apply(...args) {
        if (!Is.String(args[0])) {
            return args[0];
        }
        let content = format(...args.filter(arg => arg !== undefined));
        const matches = content.match(/\({(.*?)} ([\s\S]*?)\)/g);
        if (!matches) {
            return content;
        }
        matches.forEach(match => {
            const [chalkMethodsInBrackets, chalkMethodsString] = match.match(/\{(.*?)}/);
            const message = match
                .replace(chalkMethodsInBrackets, '')
                .replace(/\s*\(\s*|\s*\)\s*/g, '');
            const chalkMethodsArray = chalkMethodsString.replace(/\s/g, '').split(',');
            let chalk = new Chalk();
            chalkMethodsArray.forEach(chalkMethod => {
                if (!chalk[chalkMethod])
                    return;
                chalk = chalk[chalkMethod];
            });
            content = content.replace(match, chalk(message));
        });
        return content;
    }
}
