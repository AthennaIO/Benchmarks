/**
 * @athenna/common
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import type { FolderJson } from '#src/types';
import { File } from '#src/helpers/File';
export declare class Folder {
    /**
     * The original or faked folder directory.
     */
    dir: string;
    /**
     * The original or faked folder name.
     */
    name: string;
    /**
     * The original or faked folder base.
     */
    base: string;
    /**
     * The original or faked folder path.
     */
    path: string;
    /**
     * All the files inside of the folder.
     */
    files: File[];
    /**
     * All the folders inside the folder.
     */
    folders: Folder[];
    /**
     * Set if the original or fake folder exists.
     */
    folderExists: boolean;
    /**
     * Date when the folder was created.
     */
    createdAt: Date;
    /**
     * Date when the folder was last accessed.
     */
    accessedAt: Date;
    /**
     * Date when the folder was last modified.
     */
    modifiedAt: Date;
    /**
     * The folder size.
     */
    folderSize: string;
    /**
     * Set if folder is a copy or not.
     */
    isCopy: boolean;
    /**
     * Original folder directory.
     */
    originalDir: string;
    /**
     * Original folder name.
     */
    originalName: string;
    /**
     * Original folder base.
     */
    originalBase: string;
    /**
     * Original folder path.
     */
    originalPath: string;
    /**
     * Set if original folder exists.
     */
    originalFolderExists: boolean;
    constructor(folderPath: string, mockedValues?: boolean, isCopy?: boolean);
    /**
     * Get the size of the folder.
     */
    static folderSizeSync(folderPath: string): number;
    /**
     * Get the size of the folder.
     */
    static folderSize(folderPath: string): Promise<number>;
    /**
     * Remove the folder it's existing or not.
     */
    static safeRemove(folderPath: string): Promise<void>;
    /**
     * Verify if folder exists.
     */
    static existsSync(folderPath: string): boolean;
    /**
     * Verify if folder exists.
     */
    static exists(folderPath: string): Promise<boolean>;
    /**
     * Verify if path is from folder or file.
     */
    static isFolderSync(path: string): boolean;
    /**
     * Verify if path is from folder or file.
     *
     * @param {string} path
     * @return {Promise<boolean>}
     */
    static isFolder(path: string): Promise<boolean>;
    /**
     * Get sub files of folder.
     */
    private static getSubFiles;
    /**
     * Get sub folders of folder.
     */
    private static getSubFolders;
    /**
     * Parse the folder path.
     */
    private static parsePath;
    /**
     * Returns the file as a JSON object.
     */
    toJSON(): FolderJson;
    /**
     * Load or create the folder.
     */
    loadSync(options?: {
        withSub?: boolean;
        withContent?: boolean;
        isInternalLoad?: boolean;
    }): Folder;
    /**
     * Load or create the folder.
     */
    load(options?: {
        withSub?: boolean;
        withContent?: boolean;
        isInternalLoad?: boolean;
    }): Promise<Folder>;
    /**
     * Remove the folder.
     */
    removeSync(): void;
    /**
     * Remove the folder.
     */
    remove(): Promise<void>;
    /**
     * Create a copy of the folder.
     */
    copySync(path: string, options?: {
        withSub?: boolean;
        withContent?: boolean;
        mockedValues?: boolean;
    }): Folder;
    /**
     * Create a copy of the folder.
     */
    copy(path: string, options?: {
        withSub?: boolean;
        withContent?: boolean;
        mockedValues?: boolean;
    }): Promise<Folder>;
    /**
     * Move the folder to other path.
     */
    moveSync(path: string, options?: {
        withSub?: boolean;
        withContent?: boolean;
        mockedValues?: boolean;
    }): Folder;
    /**
     * Move the folder to other path.
     */
    move(path: string, options?: {
        withSub?: boolean;
        withContent?: boolean;
        mockedValues?: boolean;
    }): Promise<Folder>;
    /**
     * Get all the files of folder using glob pattern.
     */
    getFilesByPattern(pattern?: string): File[];
    /**
     * Get all the folders of folder using glob pattern.
     */
    getFoldersByPattern(pattern?: string): Folder[];
    /**
     * Create folder values.
     */
    private createFolderValues;
    /**
     * Load sub files/folder of folder.
     */
    private loadSubSync;
    /**
     * Load sub files/folder of folder.
     */
    private loadSub;
}
