/**
 * @athenna/common
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import * as changeCase from 'change-case';
import Youch from 'youch';
import YouchTerminal from 'youch-terminal';
import { Is } from '@athenna/common';
import { Color } from '#src/helpers/Color';
import { Options } from '#src/helpers/Options';
export class Exception extends Error {
    /**
     * Creates a new instance of Exception.
     */
    constructor(options) {
        super(options?.message || '');
        this.isAthennaException = true;
        options = Options.create(options, {
            message: '',
            status: 500,
            help: null,
            stack: null,
            name: this.constructor.name,
            code: changeCase.constantCase(this.constructor.name)
        });
        this.name = options.name;
        this.code = options.code;
        this.status = options.status;
        this.message = options.message;
        if (options.help) {
            this.help = options.help;
        }
        if (options.details) {
            this.details = options.details;
        }
        if (options.otherInfos) {
            this.otherInfos = options.otherInfos;
        }
        if (options.stack) {
            this.stack = options.stack;
        }
        else {
            Exception.captureStackTrace(this, this.constructor);
        }
    }
    /**
     * Transform the exception to a valid JSON Object.
     */
    toJSON(stack = true) {
        const json = {};
        json.code = this.code;
        json.name = this.name;
        json.status = this.status;
        json.message = this.message;
        if (this.help)
            json.help = this.help;
        if (this.details)
            json.details = this.details;
        if (this.otherInfos)
            json.otherInfos = this.otherInfos;
        if (stack)
            json.stack = this.stack;
        return json;
    }
    /**
     * Prettify the error using Youch API.
     */
    async prettify(options) {
        options = Options.create(options, {
            displayShortPath: false,
            prefix: '',
            hideErrorTitle: true,
            hideMessage: false,
            displayMainFrameOnly: false,
            framesMaxLimit: 3
        });
        const separator = Color.cyan('-----');
        const helpKey = Color.gray.bold.bgGreen(' HELP ');
        const detailsKey = Color.gray.bold.bgHex('#f18b0e')(' DETAILS ');
        const otherInfosKey = Color.gray.bold.bgHex('#f18b0e')(' OTHER INFOS ');
        const title = Color.gray.bold.bgRed(` ${this.code || this.name} `);
        let help = '';
        let message = `${title}\n\n${Color.apply(this.message)}`;
        if (this.details && this.details.length) {
            message = `${message}\n\n${detailsKey}\n\n${this.details
                .map(detail => {
                if (Is.String(detail)) {
                    return Color.orange(Color.apply(detail));
                }
                return Color.orange(JSON.stringify(detail, null, 2));
            })
                .join('\n')}`;
        }
        if (this.otherInfos && !Is.Empty(this.otherInfos)) {
            message = `${message}\n\n${otherInfosKey}\n\n${Is.String(this.otherInfos)
                ? Color.orange(Color.apply(this.otherInfos))
                : Color.orange(JSON.stringify(this.otherInfos, null, 2))}`;
        }
        if (this.help && this.help !== '') {
            help = `${helpKey}\n\n  ${Color.green(Color.apply(this.help))}\n\n  ${separator}`;
        }
        else {
            message = message.concat(`\n\n${separator}`);
        }
        const pretty = await new Youch(new Exception({
            help,
            message,
            code: this.code,
            stack: this.stack,
            status: this.status,
            details: this.details,
            otherInfos: this.otherInfos
        }), {}).toJSON();
        return YouchTerminal(pretty, options);
    }
}
