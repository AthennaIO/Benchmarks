/**
 * @athenna/common
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import type { CommandInput, CommandOutput, NodeCommandInput, PaginationOptions, PaginatedResponse, InstallPackageOptions, LinkPackageOptions } from '#src/types';
import { File } from '#src/helpers/File';
import { type ExecaChildProcess } from 'execa';
export declare class Exec {
    /**
     * Sleep the code in the line that this function
     * is being called.
     */
    static sleep(ms: number): Promise<void>;
    /**
     * Execute some callback concurrently in all values of the array.
     */
    static concurrently<T = any, R = any>(array: T[], callback: (value: T, index: number, array: T[]) => Promise<R>): Promise<R[]>;
    static shell(command: string, options?: CommandInput): ExecaChildProcess<string>;
    static shell(command: string, options?: CommandInput): Promise<CommandOutput>;
    /**
     * Install libraries into a path using a registry as a child process.
     */
    static install(libraries: string | string[], options?: InstallPackageOptions): Promise<CommandOutput>;
    /**
     * Link libraries into a path using a registry as a child process.
     */
    static link(libraries: string | string[], options?: LinkPackageOptions): Promise<CommandOutput>;
    static command(command: string, options?: CommandInput): ExecaChildProcess<string>;
    static command(command: string, options?: CommandInput): Promise<CommandOutput>;
    static node(path: string, argv?: string[], options?: NodeCommandInput): ExecaChildProcess<string>;
    static node(path: string, argv?: string[], options?: NodeCommandInput): Promise<CommandOutput>;
    /**
     * Execute an Artisan file in a child process.
     */
    static artisan(path: string, options?: NodeCommandInput): Promise<void>;
    /**
     * Download an archive to a determined path.
     */
    static download(path: string, url: string): Promise<File>;
    /**
     * Paginate a collection of data.
     */
    static pagination<T = any>(data: any[], total: number, pagination?: PaginationOptions): PaginatedResponse<T>;
}
