/**
 * @athenna/common
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import lodash from 'lodash';
import { Is } from '#src/helpers/Is';
import { Options } from '#src/helpers/Options';
export class ObjectBuilder {
    constructor(options) {
        this.options = Options.create(options, {
            ignoreNull: false,
            ignoreUndefined: true,
            defaultValue: null,
            referencedValues: false
        });
        this.object = {};
    }
    /**
     * Set a value in the object or fallback to defaultValue.
     *
     * @example
     *  const object = Object.builder()
     *    .set('hello.world', 'hello world!')
     *    .get()
     *
     *  console.log(object.hello.world)
     */
    set(key, value, defaultValue) {
        if (!Is.String(key)) {
            this.object = this.getValue(key);
            return this;
        }
        if (this.isDefinedDefaultValue(defaultValue) && !Is.Defined(value)) {
            lodash.set(this.object, key.split('.'), this.getValue(defaultValue));
            return this;
        }
        if (this.options.ignoreNull && value === null) {
            return this;
        }
        if (this.options.ignoreUndefined && value === undefined) {
            return this;
        }
        lodash.set(this.object, key.split('.'), this.getValue(value));
        return this;
    }
    /**
     * Delete a value from the object by the key.
     */
    delete(key) {
        if (this.notExists(key)) {
            return this;
        }
        const [mainKey, ...keys] = key.split('.');
        if (key === mainKey) {
            delete this.object[key];
            return this;
        }
        const object = this.object[mainKey];
        lodash.unset(object, keys.join('.'));
        object[mainKey] = object;
        return this;
    }
    /**
     * Get the value built.
     */
    get(key, defaultValue) {
        if (key === undefined) {
            return this.getValue(this.object);
        }
        const value = Json.get(this.object, key, defaultValue);
        return this.getValue(value);
    }
    /**
     * Omit data from object.
     */
    omit(keys) {
        return Json.omit(this.object, keys);
    }
    /**
     * Omit data from object.
     */
    pick(keys) {
        return Json.pick(this.object, keys);
    }
    /**
     * Return an array with the property names.
     */
    keys() {
        return Object.keys(this.get());
    }
    /**
     * Return an array with the property values.
     */
    values() {
        return Object.values(this.get());
    }
    /**
     * Return an array with the property names and values.
     */
    entries() {
        return Object.entries(this.get());
    }
    /**
     * Execute some operation for each key of the object.
     */
    forEachKey(closure) {
        return this.keys().map(closure);
    }
    /**
     * Execute some operation for each value of the object.
     */
    forEachValue(closure) {
        return this.values().map(closure);
    }
    /**
     * Execute some operation for each entry of the object.
     */
    forEachEntry(closure) {
        return this.entries().map(closure);
    }
    /**
     * Verify if the object key path has the same value.
     */
    is(key, ...values) {
        let is = false;
        values = Is.Array(values[0]) ? values[0] : values;
        for (const value of values) {
            if (this.get(key) === value) {
                is = true;
                break;
            }
        }
        return is;
    }
    /**
     * Verify if the object key path does not have the same value.
     */
    isNot(key, ...values) {
        return !this.is(key, ...values);
    }
    /**
     * Verify if key path exists in object.
     */
    exists(key) {
        return !!this.get(key);
    }
    /**
     * Verify if key path does not exists in object.
     */
    notExists(key) {
        return !this.exists(key);
    }
    /**
     * Verify if all the object keys exists.
     */
    existsAll(...keys) {
        let existsAll = true;
        keys = Is.Array(keys[0]) ? keys[0] : keys;
        for (const key of keys) {
            if (this.notExists(key)) {
                existsAll = false;
                break;
            }
        }
        return existsAll;
    }
    /**
     * Verify if all the object keys does not exist.
     */
    notExistsAll(...keys) {
        return !this.existsAll(...keys);
    }
    /**
     * Verify if defaultValue or global default value option
     * is defined.
     */
    isDefinedDefaultValue(defaultValue) {
        return Is.Defined(defaultValue) || Is.Defined(this.options.defaultValue);
    }
    /**
     * Get the value referenced or not depending on
     * "options.referencedValues". Also will auto set
     * the "options.defaultValue" if any value is set.
     */
    getValue(value, defaultValue = this.options.defaultValue) {
        if (this.options.referencedValues) {
            return Is.Defined(value) ? value : defaultValue;
        }
        return Json.copy(Is.Defined(value) ? value : defaultValue);
    }
}
export class Json {
    /**
     * Create a new instance of ObjectBuilder class.
     * This class is responsible to build new objects
     * in a more easy way, removing null and undefined values
     * and setting default values in options.
     */
    static builder(options) {
        return new ObjectBuilder(options);
    }
    /**
     * Deep copy any object properties without reference.
     */
    static copy(object) {
        return lodash.cloneDeep(object);
    }
    /**
     * Omit data from an object.
     *
     * @example
     * ```ts
     * const obj = {
     *  name: 'Lenon',
     *  age: 22
     * }
     *
     * const omitted = Json.omit(obj, ['name']) // { age: 22 }
     * ```
     */
    static omit(object, keys) {
        return lodash.omit(object, keys);
    }
    /**
     * Pick data from an object.
     *
     * @example
     * ```ts
     * const obj = {
     *  name: 'Lenon',
     *  age: 22
     * }
     *
     * const picked = Json.pick(obj, ['name']) // { name: 'Lenon' }
     * ```
     */
    static pick(object, keys) {
        return lodash.pick(object, keys);
    }
    /**
     * Find all JSON inside string and return it.
     */
    static getJson(text) {
        let match;
        const json = [];
        while ((match = /{[^{}]*}/.exec(text)) !== null) {
            text = text.replace(match[0], '');
            json.push(match[0]);
        }
        return json;
    }
    /**
     * Converts a JSON string into an object without exception.
     */
    static parse(text, reviver) {
        try {
            return JSON.parse(text, reviver);
        }
        catch (error) {
            return null;
        }
    }
    /**
     * Observe changes inside objects.
     */
    static observeChanges(object, func, ...args) {
        return new Proxy(object, {
            set: (target, key, value) => {
                func(value, ...args);
                target[key] = value;
                return true;
            }
        });
    }
    /**
     * Remove all keys from data that is not inside array keys.
     */
    static fillable(data, keys) {
        return keys.reduce((previous, key) => {
            if (data[key]) {
                previous[key] = data[key];
            }
            return previous;
        }, {});
    }
    /**
     * Get the object properties based on a key.
     */
    static get(object, key, defaultValue = undefined) {
        if (key === '' && object) {
            return object;
        }
        return lodash.get(object, key, defaultValue);
    }
}
