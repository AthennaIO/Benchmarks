/**
 * @athenna/common
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import callSite from 'callsite';
import { fileURLToPath } from 'node:url';
import { homedir, tmpdir } from 'node:os';
import { sep, normalize, dirname } from 'node:path';
class Path {
    static { this.dirs = {
        bin: 'bin',
        src: 'src',
        app: 'app',
        services: 'app/services',
        exceptions: 'app/exceptions',
        repositories: 'app/repositories',
        console: 'app/console',
        commands: 'app/console/commands',
        http: 'app/http',
        controllers: 'app/http/controllers',
        middlewares: 'app/http/middlewares',
        interceptors: 'app/http/interceptors',
        terminators: 'app/http/terminators',
        bootstrap: 'bootstrap',
        config: 'config',
        database: 'database',
        seeders: 'database/seeders',
        migrations: 'database/migrations',
        lang: 'lang',
        resources: 'resources',
        views: 'resources/views',
        locales: 'resources/locales',
        nodeModules: 'node_modules',
        nodeModulesBin: 'node_modules/.bin',
        providers: 'providers',
        facades: 'providers/facades',
        public: 'public',
        static: 'public/static',
        assets: 'public/assets',
        routes: 'routes',
        storage: 'storage',
        logs: 'storage/logs',
        tests: 'tests',
        stubs: 'tests/stubs',
    }; }
    /**
     * Merge your custom directories with the default directories.
     */
    static mergeDirs(dirs) {
        this.dirs = { ...this.dirs, ...dirs };
        return this;
    }
    /**
     * Return js or ts extension depending on IS_TS.
     */
    static ext() {
        const isTs = !!(process.env.IS_TS &&
            (process.env.IS_TS === 'true' || process.env.IS_TS === '(true)'));
        if (isTs) {
            return 'ts';
        }
        return 'js';
    }
    /**
     * Return the pwd path of your project.
     */
    static pwd(subPath = sep) {
        const pwd = normalize(`${process.cwd()}${sep}${normalize(subPath)}`);
        return this.removeSlashes(pwd);
    }
    /**
     * Return the src path of your project.
     */
    static src(subPath = sep) {
        return this.pwd(normalize(this.dirs.src) + sep + normalize(subPath));
    }
    /**
     * Set the directory of src folder.
     */
    static setSrc(directory) {
        this.dirs.src = directory;
        return this;
    }
    /**
     * Return the bin path of your project.
     */
    static bin(subPath = sep) {
        return this.pwd(normalize(this.dirs.bin) + sep + normalize(subPath));
    }
    /**
     * Set the directory of bin folder.
     */
    static setBin(directory) {
        this.dirs.bin = directory;
        return this;
    }
    /**
     * Return the app path of your project.
     */
    static app(subPath = sep) {
        return this.pwd(normalize(this.dirs.app) + sep + normalize(subPath));
    }
    /**
     * Set the directory of app folder.
     */
    static setApp(directory) {
        this.dirs.app = directory;
        return this;
    }
    /**
     * Return the bootstrap path of your project.
     */
    static bootstrap(subPath = sep) {
        return this.pwd(normalize(this.dirs.bootstrap) + sep + normalize(subPath));
    }
    /**
     * Set the directory of bootstrap folder.
     */
    static setBootstrap(directory) {
        this.dirs.bootstrap = directory;
        return this;
    }
    /**
     * Return the config path of your project.
     */
    static config(subPath = sep) {
        return this.pwd(normalize(this.dirs.config) + sep + normalize(subPath));
    }
    /**
     * Set the directory of config folder.
     */
    static setConfig(directory) {
        this.dirs.config = directory;
        return this;
    }
    /**
     * Return the database path of your project.
     */
    static database(subPath = sep) {
        return this.pwd(this.dirs.database + sep + normalize(subPath));
    }
    /**
     * Set the directory of database folder.
     */
    static setDatabase(directory) {
        this.dirs.database = directory;
        return this;
    }
    /**
     * Return the lang path of your project.
     */
    static lang(subPath = sep) {
        return this.pwd(this.dirs.lang + sep + normalize(subPath));
    }
    /**
     * Set the directory of lang folder.
     */
    static setLang(directory) {
        this.dirs.lang = directory;
        return this;
    }
    /**
     * Return the node_modules path of your project.
     */
    static nodeModules(subPath = sep) {
        return this.pwd(this.dirs.nodeModules + sep + normalize(subPath));
    }
    /**
     * Set the directory of node_modules folder.
     */
    static setNodeModules(directory) {
        this.dirs.nodeModules = directory;
        return this;
    }
    /**
     * Return the providers' path of your project.
     */
    static providers(subPath = sep) {
        return this.pwd(this.dirs.providers + sep + normalize(subPath));
    }
    /**
     * Set the directory of providers folder.
     */
    static setProviders(directory) {
        this.dirs.providers = directory;
        return this;
    }
    /**
     * Return the facades' path of your project.
     */
    static facades(subPath = sep) {
        return this.pwd(this.dirs.facades + sep + normalize(subPath));
    }
    /**
     * Set the directory of facades folder.
     */
    static setFacades(directory) {
        this.dirs.facades = directory;
        return this;
    }
    /**
     * Return the public path of your project.
     */
    static public(subPath = sep) {
        return this.pwd(this.dirs.public + sep + normalize(subPath));
    }
    /**
     * Set the directory of public folder.
     */
    static setPublic(directory) {
        this.dirs.public = directory;
        return this;
    }
    /**
     * Return the resources' path of your project.
     */
    static resources(subPath = sep) {
        return this.pwd(this.dirs.resources + sep + normalize(subPath));
    }
    /**
     * Set the directory of resources folder.
     */
    static setResources(directory) {
        this.dirs.resources = directory;
        return this;
    }
    /**
     * Return the routes' path of your project.
     */
    static routes(subPath = sep) {
        return this.pwd(this.dirs.routes + sep + normalize(subPath));
    }
    /**
     * Set the directory of routes folder.
     */
    static setRoutes(directory) {
        this.dirs.routes = directory;
        return this;
    }
    /**
     * Return the storage path of your project.
     */
    static storage(subPath = sep) {
        return this.pwd(this.dirs.storage + sep + normalize(subPath));
    }
    /**
     * Set the directory of storage folder.
     */
    static setStorage(directory) {
        this.dirs.storage = directory;
        return this;
    }
    /**
     * Return the tests' path of your project.
     */
    static tests(subPath = sep) {
        return this.pwd(this.dirs.tests + sep + normalize(subPath));
    }
    /**
     * Set the directory of tests folder.
     */
    static setTests(directory) {
        this.dirs.tests = directory;
        return this;
    }
    /**
     * Return the logs' path of your project.
     */
    static logs(subPath = sep) {
        return this.pwd(this.dirs.logs + sep + normalize(subPath));
    }
    /**
     * Set the directory of logs folder.
     */
    static setLogs(directory) {
        this.dirs.logs = directory;
        return this;
    }
    /**
     * Return the views' path of your project.
     */
    static views(subPath = sep) {
        return this.pwd(this.dirs.views + sep + normalize(subPath));
    }
    /**
     * Set the directory of views folder.
     */
    static setViews(directory) {
        this.dirs.views = directory;
        return this;
    }
    /**
     * Return the static' path of your project.
     */
    static static(subPath = sep) {
        return this.pwd(this.dirs.static + sep + normalize(subPath));
    }
    /**
     * Set the directory of static folder.
     */
    static setStatic(directory) {
        this.dirs.static = directory;
        return this;
    }
    /**
     * Return the assets' path of your project.
     */
    static assets(subPath = sep) {
        return this.pwd(this.dirs.assets + sep + normalize(subPath));
    }
    /**
     * Set the directory of assets folder.
     */
    static setAssets(directory) {
        this.dirs.assets = directory;
        return this;
    }
    /**
     * Return the locales' path of your project.
     */
    static locales(subPath = sep) {
        return this.pwd(this.dirs.locales + sep + normalize(subPath));
    }
    /**
     * Set the directory of locales folder.
     */
    static setLocales(directory) {
        this.dirs.locales = directory;
        return this;
    }
    /**
     * Return the stubs' path of your project.
     */
    static stubs(subPath = sep) {
        return this.pwd(this.dirs.stubs + sep + normalize(subPath));
    }
    /**
     * Set the directory of stubs folder.
     */
    static setStubs(directory) {
        this.dirs.stubs = directory;
        return this;
    }
    /**
     * Return the http path of your project.
     */
    static http(subPath = sep) {
        return this.pwd(this.dirs.http + sep + normalize(subPath));
    }
    /**
     * Set the directory of http folder.
     */
    static setHttp(directory) {
        this.dirs.http = directory;
        return this;
    }
    /**
     * Return the console path of your project.
     */
    static console(subPath = sep) {
        return this.pwd(this.dirs.console + sep + normalize(subPath));
    }
    /**
     * Set the directory of console folder.
     */
    static setConsole(directory) {
        this.dirs.console = directory;
        return this;
    }
    /**
     * Return the services' path of your project.
     */
    static services(subPath = sep) {
        return this.pwd(this.dirs.services + sep + normalize(subPath));
    }
    /**
     * Set the directory of services folder.
     */
    static setServices(directory) {
        this.dirs.services = directory;
        return this;
    }
    /**
     * Return the repositories' path of your project.
     */
    static repositories(subPath = sep) {
        return this.pwd(this.dirs.repositories + sep + normalize(subPath));
    }
    /**
     * Set the directory of repositories folder.
     */
    static setRepositories(directory) {
        this.dirs.repositories = directory;
        return this;
    }
    /**
     * Return the commands' path of your project.
     */
    static commands(subPath = sep) {
        return this.pwd(this.dirs.commands + sep + normalize(subPath));
    }
    /**
     * Set the directory of commands folder.
     */
    static setCommands(directory) {
        this.dirs.commands = directory;
        return this;
    }
    /**
     * Return the controllers' path of your project.
     */
    static controllers(subPath = sep) {
        return this.pwd(this.dirs.controllers + sep + normalize(subPath));
    }
    /**
     * Set the directory of controllers folder.
     */
    static setControllers(directory) {
        this.dirs.controllers = directory;
        return this;
    }
    /**
     * Return the exceptions' path of your project.
     */
    static exceptions(subPath = sep) {
        return this.pwd(this.dirs.exceptions + sep + normalize(subPath));
    }
    /**
     * Set the directory of exceptions folder.
     */
    static setExceptions(directory) {
        this.dirs.exceptions = directory;
        return this;
    }
    /**
     * Return the middlewares' path of your project.
     */
    static middlewares(subPath = sep) {
        return this.pwd(this.dirs.middlewares + sep + normalize(subPath));
    }
    /**
     * Set the directory of middlewares folder.
     */
    static setMiddlewares(directory) {
        this.dirs.middlewares = directory;
        return this;
    }
    /**
     * Return the interceptors' path of your project.
     */
    static interceptors(subPath = sep) {
        return this.pwd(this.dirs.interceptors + sep + normalize(subPath));
    }
    /**
     * Set the directory of interceptors folder.
     */
    static setInterceptors(directory) {
        this.dirs.interceptors = directory;
        return this;
    }
    /**
     * Return the terminators' path of your project.
     */
    static terminators(subPath = sep) {
        return this.pwd(this.dirs.terminators + sep + normalize(subPath));
    }
    /**
     * Set the directory of terminators folder.
     */
    static setTerminators(directory) {
        this.dirs.terminators = directory;
        return this;
    }
    /**
     * Return the migrations' path of your project.
     */
    static migrations(subPath = sep) {
        return this.pwd(this.dirs.migrations + sep + normalize(subPath));
    }
    /**
     * Set the directory of migrations folder.
     */
    static setMigrations(directory) {
        this.dirs.migrations = directory;
        return this;
    }
    /**
     * Return the seeders' path of your project.
     */
    static seeders(subPath = sep) {
        return this.pwd(this.dirs.seeders + sep + normalize(subPath));
    }
    /**
     * Set the directory of seeders folder.
     */
    static setSeeders(directory) {
        this.dirs.seeders = directory;
        return this;
    }
    /**
     * Return the .bin path of your node_modules.
     */
    static nodeModulesBin(subPath = sep) {
        return this.pwd(this.dirs.nodeModulesBin + sep + normalize(subPath));
    }
    /**
     * Set the directory of .bin folder of your node_modules.
     */
    static setNodeModulesBin(directory) {
        this.dirs.nodeModulesBin = directory;
        return this;
    }
    /**
     * Return the tmp path of your vm.
     */
    static vmTmp(subPath = sep) {
        const osTmpDir = tmpdir();
        const tmpDir = osTmpDir.concat(sep, normalize(subPath));
        return this.removeSlashes(tmpDir);
    }
    /**
     * Return the home path of your vm.
     */
    static vmHome(subPath = sep) {
        const osHomeDir = homedir();
        const homeDir = osHomeDir.concat(sep, normalize(subPath));
        return this.removeSlashes(homeDir);
    }
    /**
     * Return the execution path of where this method
     * is being called.
     */
    static this(subPath = sep, stackIndex = 1) {
        const stack = callSite();
        const requester = dirname(fileURLToPath(stack[stackIndex].getFileName()));
        const execDir = normalize(requester.concat(sep, normalize(subPath)));
        return this.removeSlashes(execDir);
    }
    /**
     * Remove additional slashes from path.
     */
    static removeSlashes(path) {
        path = normalize(path);
        if (path.endsWith(sep)) {
            return this.removeSlashes(path.slice(0, -1));
        }
        return path;
    }
}
export { Path };
