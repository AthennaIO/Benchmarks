/**
 * @athenna/common
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { File } from '#src/Helpers/File';
import { FastifyInstance, HTTPMethods, RouteOptions } from 'fastify';
export declare class FakeApi {
    /**
     * Set if the FakeApi server is running.
     */
    private static _isRunning;
    /**
     * Create the fastify server with plugins.
     *
     * This method is already called when you import FakeApi module.
     */
    static recreate(): FastifyInstance;
    /**
     * Creates a new instance of FakeApiBuilder
     */
    static build(): FakeApiBuilder;
    /**
     * List the routes registered in the fake server.
     *
     * @return {string}
     */
    static listRoutes(): string;
    /**
     * Verify if the FakeApi server is running.
     */
    static isRunning(): boolean;
    /**
     * Register all routes inside folder path
     * and start the fake api server at port 8989.
     */
    static start(port?: number, folderPath?: string): Promise<void>;
    /**
     * Stop the fake api server.
     */
    static stop(): Promise<void>;
    /**
     * Register all file routes found in folder path.
     */
    static registerFolder(path: string): Promise<void>;
    /**
     * Register a route file.
     */
    static registerFile(file: File): void;
}
export declare class FakeApiBuilder {
    /**
     * The route path.
     */
    private _path?;
    /**
     * The redirect path.
     */
    private _redirectTo?;
    /**
     * The route method.
     */
    private _method?;
    /**
     * The route response body.
     */
    private _body?;
    /**
     * The route response headers.
     */
    private _headers?;
    /**
     * The route response status code.
     */
    private _statusCode?;
    /**
     * Set the route path.
     */
    path(path: string): FakeApiBuilder;
    /**
     * Set the redirect path.
     */
    redirectTo(redirectTo: string): FakeApiBuilder;
    /**
     * Set the route method.
     */
    method(method: HTTPMethods): FakeApiBuilder;
    /**
     * Set the response body of the route.
     */
    body(body: any | any[]): FakeApiBuilder;
    /**
     * Set the response headers of the route.
     */
    headers(headers: any): FakeApiBuilder;
    /**
     * Set the response status code of the route.
     */
    statusCode(statusCode: number): FakeApiBuilder;
    /**
     * Register the route.
     */
    register(options?: Partial<RouteOptions>): void;
}
