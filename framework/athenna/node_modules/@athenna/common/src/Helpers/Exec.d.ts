/**
 * @athenna/common
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { File } from '#src/Helpers/File';
export interface PaginationOptions {
    page?: number;
    limit?: number;
    resourceUrl?: string;
}
export interface PaginatedResponse<T = any> {
    data?: T[];
    meta?: {
        totalItems: number;
        itemsPerPage: number;
        totalPages: number;
        currentPage: number;
        itemCount: number;
    };
    links?: {
        next: string;
        previous: string;
        last: string;
        first: string;
    };
}
export declare class Exec {
    /**
     * Sleep the code in the line that this function
     * is being called.
     */
    static sleep(ms: number): Promise<void>;
    /**
     * Execute some callback concurrently in all values of the array.
     */
    static concurrently<T = any, R = any>(array: T[], callback: (value: T, index: number, array: T[]) => Promise<R>): Promise<R[]>;
    /**
     * Execute a command of child process exec as promise.
     */
    static command(command: string, options?: {
        ignoreErrors?: boolean;
    }): Promise<{
        stdout: string;
        stderr: string;
    }>;
    /**
     * Download an archive to determined path.
     */
    static download(name: string, path: string, url: string): Promise<File>;
    /**
     * Paginate a collection of data.
     */
    static pagination<T = any>(data: any[], total: number, pagination?: PaginationOptions): PaginatedResponse<T>;
}
