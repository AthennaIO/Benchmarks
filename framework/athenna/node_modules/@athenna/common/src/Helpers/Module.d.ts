/**
 * @athenna/common
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
/// <reference types="node" resolution-mode="require"/>
import { File, type ModuleResolveOptions } from '#src';
export declare class Module {
    /**
     * Get the module first export match or default.
     */
    static get<T = any>(module: any | Promise<any>): Promise<T>;
    /**
     * Get the module first export match or default with an alias.
     *
     * @example
     *  const _module = import('#app/services/MyService')
     *  const _alias = 'App/Services'
     *
     *  const { alias, module } = Module.getWithAlias(_module, _alias)
     *
     *  console.log(alias) // 'App/Services/MyService'
     *  console.log(module) // [class MyService]
     */
    static getWithAlias<T = any>(module: any | Promise<any>, subAlias: string): Promise<{
        alias: string;
        module: T;
    }>;
    /**
     * Get all modules first export match or default and return
     * as an array.
     */
    static getAll(modules: any[]): Promise<any[]>;
    /**
     * Get all modules first export match or default with an alias.
     *
     * @example
     *  const _modules = [import('#app/services/MyService')]
     *  const _alias = 'App/Services'
     *
     *  const [{ alias, module }] = Module.getAllWithAlias(_modules, _alias)
     *
     *  console.log(alias) // 'App/Services/MyService'
     *  console.log(module) // [class MyService]
     */
    static getAllWithAlias(modules: any[], subAlias: string): Promise<{
        alias: string;
        module: any;
    }[]>;
    /**
     * Same as get method, but import the path directly.
     */
    static getFrom<T = any>(path: string): Promise<T>;
    /**
     * Same as getWithAlias method, but import the path directly.
     */
    static getFromWithAlias<T = any>(path: string, subAlias: string): Promise<{
        alias: string;
        module: T;
    }>;
    /**
     * Same as getAll method but import everything in the path directly.
     */
    static getAllFrom(path: string): Promise<any[]>;
    /**
     * Same as getAllWithAlias method but import everything in the path directly.
     */
    static getAllFromWithAlias(path: string, subAlias: string): Promise<{
        alias: string;
        module: any;
    }[]>;
    /**
     * Verify if folder exists and get all .js files inside.
     */
    static getAllJSFilesFrom(path: string): Promise<File[]>;
    /**
     * Import a full path using the path href to ensure compatibility
     * between OS's.
     */
    static import<T = any>(path: string): Promise<T>;
    /**
     * Same as import method, but safeImport return null if the
     * module does not exist, catching the error throw from bad
     * import.
     */
    static safeImport<T = any>(path: string): Promise<T | null>;
    /**
     * Resolve the module path by parent URL.
     */
    static resolve<T = any>(path: string, parentURL: string, options?: ModuleResolveOptions): Promise<T>;
    /**
     * Create the __dirname property. Set in global if necessary.
     */
    static createDirname(url?: string, setInGlobal?: boolean): string;
    /**
     * Create the __filename property. Set in global if necessary.
     */
    static createFilename(url?: string, setInGlobal?: boolean): string;
    /**
     * Create the require function. Set in global if necessary.
     */
    static createRequire(url?: string, setInGlobal?: boolean): NodeRequire;
}
