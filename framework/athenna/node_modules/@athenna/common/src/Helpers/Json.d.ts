/**
 * @athenna/common
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import type { ObjectBuilderOptions } from '#src/types';
export declare class ObjectBuilder {
    /**
     * The real object that is being built.
     */
    object: any;
    /**
     * The object builder options that are
     * going to be used to shape the object.
     */
    options: ObjectBuilderOptions;
    constructor(options?: ObjectBuilderOptions);
    /**
     * Set a value in the object or fallback to defaultValue.
     *
     * @example
     *  const object = Object.builder()
     *    .set('hello.world', 'hello world!')
     *    .get()
     *
     *  console.log(object.hello.world)
     */
    set(key: string | any, value?: any, defaultValue?: any): this;
    /**
     * Delete the configuration key.
     */
    delete(key: string): this;
    /**
     * Get the value built.
     */
    get<T = any>(key?: string, defaultValue?: any): T;
    /**
     * Return an array with the property names.
     */
    keys(): string[];
    /**
     * Return an array with the property values.
     */
    values<T = any>(): T[];
    /**
     * Return an array with the property names and values.
     */
    entries<T = any>(): [string, T][];
    /**
     * Execute some operation for each key of the object.
     */
    forEachKey<T = any>(closure: (key: string, index?: number, array?: string[]) => T): T[];
    /**
     * Execute some operation for each value of the object.
     */
    forEachValue<T = any, K = any>(closure: (value: T, index?: number, array?: T[]) => K): K[];
    /**
     * Execute some operation for each entry of the object.
     */
    forEachEntry<T = any, K = any>(closure: (value: [string, T], index?: number, array?: [string, T][]) => K): K[];
    /**
     * Verify if the object key path has the same value.
     */
    is(key: string, ...values: any | any[]): boolean;
    /**
     * Verify if the object key path does not have the same value.
     */
    isNot(key: string, ...values: any | any[]): boolean;
    /**
     * Verify if key path exists in object.
     */
    exists(key: string): boolean;
    /**
     * Verify if key path does not exists in object.
     */
    notExists(key: string): boolean;
    /**
     * Verify if all the object keys exists.
     */
    existsAll(...keys: string[]): boolean;
    /**
     * Verify if all the object keys does not exist.
     */
    notExistsAll(...keys: string[]): boolean;
    /**
     * Verify if defaultValue or global default value option
     * is defined.
     */
    private isDefinedDefaultValue;
    /**
     * Get the value referenced or not depending on
     * "options.referecendValues". Also will auto set
     * the "options.defaultValue" if any value is set.
     */
    private getValue;
}
export declare class Json {
    /**
     * Create a new instance of ObjectBuilder class.
     * This class is responsible to build new objects
     * in a more easy way, removing null and undefined values
     * and setting default values in options.
     */
    static builder(options?: ObjectBuilderOptions): ObjectBuilder;
    /**
     * Deep copy any object properties without reference.
     */
    static copy(object: any): any;
    /**
     * Find all JSON inside string and return it.
     */
    static getJson(text: string): string[];
    /**
     * Converts a JSON string into an object without exception.
     */
    static parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
    /**
     * Observe changes inside objects.
     */
    static observeChanges(object: any, func: any, ...args: any[]): any;
    /**
     * Remove all keys from data that is not inside array keys.
     */
    static fillable(data: Record<string, any>, keys: string[]): Record<string, any>;
    /**
     * Get the object properties based on a key.
     */
    static get<T = any>(object: T, key: string, defaultValue?: any): T | undefined;
}
