/**
 * @athenna/common
 *
 * (c) Jo達o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
export type ObjectBuilderOptions = {
    /**
     * If referenced values is false (by default is false),
     * Athenna will make a copy of the value that you are
     * setting or getting of the ObjectBuilder object.
     * Check the example:
     *
     * @default false
     * @example
     *  const user = { name: 'Victor' }
     *  const builder = Json.builder({ referencedValues: false })
     *    .set('user', user)
     *
     *  console.log(builder.get('user.name')) // 'Victor'
     *
     *  user.name = 'Jo達o'
     *
     *  console.log(builder.get('user.name')) // 'Victor'
     *
     * Now let's check the example with referencedValues as true:
     *
     * @example
     * const user = { name: 'Victor' }
     *  const builder = Json.builder({ referencedValues: true })
     *    .set('user', user)
     *
     *  console.log(builder.get('user.name')) // 'Victor'
     *
     *  user.name = 'Jo達o'
     *
     *  console.log(builder.get('user.name')) // 'Jo達o'
     */
    referencedValues?: any;
    /**
     * The global default value that is going
     * to be used if the value that is being set
     * is undefined or null.
     *
     * @default null
     */
    defaultValue?: any;
    /**
     * Ignore null values that are going to be set
     * in the object. If some value is null, it will
     * not be set inside the object.
     *
     * @default false
     */
    ignoreNull?: boolean;
    /**
     * Ignore undefined values that are going to be set
     * in the object. If some value is undefined, it will
     * not be set inside the object.
     *
     * @default true
     */
    ignoreUndefined?: boolean;
};
export declare class ObjectBuilder {
    /**
     * The real object that is being built.
     */
    object: any;
    /**
     * The object builder options that are
     * going to be used to shape the object.
     */
    options: ObjectBuilderOptions;
    constructor(options?: ObjectBuilderOptions);
    /**
     * Set a value in the object or fallback to defaultValue.
     *
     * @example
     *  const object = Object.builder()
     *    .set('hello.world', 'hello world!')
     *    .get()
     *
     *  console.log(object.hello.world)
     */
    set(key: string | any, value?: any, defaultValue?: any): this;
    /**
     * Delete the configuration key.
     */
    delete(key: string): this;
    /**
     * Get the value builded.
     */
    get<T = any>(key?: string, defaultValue?: any): T;
    /**
     * Verify if the object key path has the same value.
     */
    is(key: string, ...values: any | any[]): boolean;
    /**
     * Verify if the object key path does not have the same value.
     */
    isNot(key: string, ...values: any | any[]): boolean;
    /**
     * Verify if key path exists in object.
     */
    exists(key: string): boolean;
    /**
     * Verify if key path does not exists in object.
     */
    notExists(key: string): boolean;
    /**
     * Verify if all the object keys exists.
     */
    existsAll(...keys: string[]): boolean;
    /**
     * Verify if all the object keys does not exist.
     */
    notExistsAll(...keys: string[]): boolean;
    /**
     * Verify if defaultValue or global default value option
     * is defined.
     */
    private isDefinedDefaultValue;
    /**
     * Get the value referenced or not depending on
     * "options.referecendValues". Also will auto set
     * the "options.defaultValue" if any value is set.
     */
    private getValue;
}
export declare class Json {
    /**
     * Create a new instance of ObjectBuilder class.
     * This class is responsible to build new objects
     * in a more easy way, removing null and undefined values
     * and setting default values in options.
     */
    static builder(options?: ObjectBuilderOptions): ObjectBuilder;
    /**
     * Deep copy any object properties without reference.
     */
    static copy(object: any): any;
    /**
     * Find all JSON inside string and return it.
     */
    static getJson(text: string): string[];
    /**
     * Converts a JSON string into an object without exception.
     */
    static parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;
    /**
     * Observe changes inside objects.
     *
     * @param {any} object
     * @param {function} func
     * @param {...any[]} args
     * @return {any}
     */
    static observeChanges(object: any, func: any, ...args: any[]): any;
    /**
     * Remove all keys from data that is not inside array keys.
     *
     * @param {any} data
     * @param {any[]} keys
     * @return {any[]}
     */
    static fillable(data: any, keys: any[]): any[];
    /**
     * Remove all duplicated values from the array.
     *
     * @deprecated Use the Collection.removeDuplicated method.
     */
    static removeDuplicated(array: any[]): any[];
    /**
     * Raffle any value from the array.
     *
     * @deprecated Use the Collection.random method.
     */
    static raffle(array: any[]): any;
    /**
     * Get the object properties based on key.
     */
    static get<T = any>(object: T, key: string, defaultValue?: any): T | undefined;
}
