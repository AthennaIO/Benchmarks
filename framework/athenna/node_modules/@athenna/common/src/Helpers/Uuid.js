/**
 * @athenna/common
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { v4 } from 'uuid';
import { Is } from '#src/helpers/Is';
import { InvalidUuidException } from '#src/exceptions/InvalidUuidException';
export class Uuid {
    /**
     * Verify if string is a valid uuid.
     */
    static verify(token, isPrefixed = false) {
        if (isPrefixed) {
            return Is.Uuid(this.getToken(token));
        }
        return Is.Uuid(token);
    }
    /**
     * Generate an uuid token
     */
    static generate(prefix) {
        if (prefix) {
            return `${prefix}::${v4()}`;
        }
        return v4();
    }
    /**
     * Return the token without his prefix.
     */
    static getToken(token) {
        const prefix = Uuid.getPrefix(token);
        if (!prefix) {
            return token;
        }
        return token.split(`${prefix}::`)[1];
    }
    /**
     * Return the prefix without his token.
     */
    static getPrefix(token) {
        const prefix = token.split('::')[0];
        /**
         * Means that the "::" char has not been
         * found. So there is no prefix in the token.
         */
        if (prefix === token) {
            return null;
        }
        return prefix;
    }
    /**
     * Inject a prefix in the uuid token.
     */
    static injectPrefix(prefix, token) {
        if (!this.verify(token)) {
            throw new InvalidUuidException(token);
        }
        return `${prefix}::${token}`;
    }
    /**
     * Change the prefix of and uuid token
     */
    static changePrefix(newPrefix, token) {
        const uuid = this.getToken(token);
        if (!this.verify(uuid)) {
            throw new InvalidUuidException(uuid);
        }
        return `${newPrefix}::${uuid}`;
    }
    /**
     * Change the token prefix or generate a new one
     */
    static changeOrGenerate(prefix, token) {
        if (token) {
            return this.changePrefix(prefix, token);
        }
        return this.generate(prefix);
    }
}
