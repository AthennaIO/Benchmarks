/**
 * @athenna/common
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import kindOf from 'kind-of';
import { isIP } from 'node:net';
import { File, Uuid, Exception } from '#src';
import { isCep, isCnpj, isCpf } from 'validator-brazil';
export class Is {
    /**
     * Return the kindOf.
     */
    static kindOf(value) {
        const kind = kindOf(value);
        if (kind === 'function' &&
            /^class\s/.test(Function.prototype.toString.call(value))) {
            return 'class';
        }
        return kind;
    }
    /**
     * Verify if the current platform is Linux.
     */
    static Linux() {
        return process.platform === 'linux';
    }
    /**
     * Verify if the current platform is Mac.
     */
    static Mac() {
        return process.platform === 'darwin';
    }
    /**
     * Verify if the current platform is Windows.
     */
    static Windows() {
        return process.platform === 'win32';
    }
    /**
     * Verify if file path or File instance is a
     * module or not.
     */
    static Module(value) {
        if (value instanceof File) {
            return Is.Module(value.extension);
        }
        if (!value || !Is.String(value)) {
            return false;
        }
        if (value.endsWith('.js') || value.endsWith('.ts')) {
            return true;
        }
        return false;
    }
    /**
     * Verify if is valid Uuid.
     */
    static Uuid(value, options) {
        return Uuid.verify(value, options);
    }
    /**
     * Verify if the value is defined, even
     * with falsy values like false and ''.
     */
    static Defined(value) {
        if (value === undefined || value === null) {
            return false;
        }
        return true;
    }
    /**
     * Verify if is valid Json.
     */
    static Json(value) {
        try {
            JSON.parse(value);
            return true;
        }
        catch (error) {
            return false;
        }
    }
    /**
     * Verify if is valid Ip.
     */
    static Ip(value) {
        // Removes http/https and port/route values
        value = value.replace(/^https?:\/\//, '').split(':')[0];
        return isIP(value) !== 0;
    }
    /**
     * Verify if is valid Empty.
     */
    static Empty(value) {
        if (!value) {
            return true;
        }
        if (Is.Array(value)) {
            return !value.length;
        }
        if (Is.String(value)) {
            return value.trim().length === 0;
        }
        if (Is.Object(value)) {
            return !Object.keys(value).length;
        }
        return false;
    }
    /**
     * Verify if is a valid Cep.
     */
    static Cep(cep) {
        if (Is.Number(cep)) {
            cep = cep.toString();
        }
        return isCep(cep);
    }
    /**
     * Verify if is a valid Cpf.
     */
    static Cpf(cpf) {
        if (Is.Number(cpf)) {
            cpf = cpf.toString();
        }
        return isCpf(cpf);
    }
    /**
     * Verify if is a valid Cnpj.
     */
    static Cnpj(cnpj) {
        if (Is.Number(cnpj)) {
            cnpj = cnpj.toString();
        }
        return isCnpj(cnpj);
    }
    /**
     * Verify if is a valid Async function.
     */
    static Async(value) {
        const fnString = value.toString().trim();
        const validation = !!(fnString.match(/^async/) || fnString.match(/return _ref[^.]*\.apply/));
        return validation || fnString.includes('new Promise(');
    }
    /**
     * Verify if is a valid Undefined.
     */
    static Undefined(value) {
        return Is.kindOf(value) === 'undefined';
    }
    /**
     * Verify if is a valid Null.
     */
    static Null(value) {
        return Is.kindOf(value) === 'null';
    }
    /**
     * Verify if is a valid Boolean.
     */
    static Boolean(value) {
        return Is.kindOf(value) === 'boolean';
    }
    /**
     * Verify if is a valid Buffer.
     */
    static Buffer(value) {
        return Is.kindOf(value) === 'buffer';
    }
    /**
     * Verify if is a valid Number.
     */
    static Number(value) {
        return Is.kindOf(value) === 'number';
    }
    /**
     * Verify if is a valid String.
     */
    static String(value) {
        return Is.kindOf(value) === 'string';
    }
    /**
     * Verify if is a valid Object.
     */
    static Object(value) {
        return Is.kindOf(value) === 'object';
    }
    /**
     * Verify if is a valid Date.
     */
    static Date(value) {
        return Is.kindOf(value) === 'date';
    }
    /**
     * Verify if is a valid Array.
     */
    static Array(value) {
        return Is.kindOf(value) === 'array';
    }
    /**
     * Verify if is a valid Regexp.
     */
    static Regexp(value) {
        return Is.kindOf(value) === 'regexp';
    }
    /**
     * Verify if is a valid Error.
     */
    static Error(value) {
        return Is.kindOf(value) === 'error';
    }
    /**
     * Verify if is a valid internal JS error.
     */
    static Exception(value) {
        if (!value) {
            return false;
        }
        return value?.isAthennaException === true && Is.Defined(value.prettify);
    }
    /**
     * Verify if is a valid Function.
     */
    // eslint-disable-next-line @typescript-eslint/ban-types
    static Function(value) {
        return Is.kindOf(value) === 'function';
    }
    /**
     * Verify if is a valid Class.
     */
    static Class(value) {
        return Is.kindOf(value) === 'class';
    }
    /**
     * Verify if is a valid Integer.
     */
    static Integer(value) {
        return Number.isInteger(value);
    }
    /**
     * Verify if is a valid Float.
     */
    static Float(value) {
        return value !== (value | 0);
    }
    /**
     * Verify if is a valid ArrayOfObjects.
     */
    static ArrayOfObjects(value) {
        if (!value.length)
            return false;
        const results = value.map(v => Is.Object(v));
        return !results.includes(false);
    }
}
