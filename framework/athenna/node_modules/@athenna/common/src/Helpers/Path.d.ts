/**
 * @athenna/common
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
export declare class Path {
    /**
     * Set a default beforePath for all Path methods that
     * use Path.pwd.
     */
    static defaultBeforePath: string;
    /**
     * Resolve the environment where the application
     * is running by verifying the import.meta.url.
     *
     * This method will auto set the IS_TS env and the
     * defaultBeforePath if IS_TS is true.
     *
     * The beforePath is always set as '/build' by default.
     */
    static resolveEnvironment(metaUrl: string, beforePath?: string): typeof Path;
    /**
     * Return js or ts extension depending on IS_TS.
     */
    static ext(): string;
    /**
     * Return the original pwd path of your project without the defaultBeforePath.
     */
    static originalPwd(subPath?: string): string;
    /**
     * Return the pwd path of your project.
     */
    static pwd(subPath?: string): string;
    /**
     * Return the src path of your project.
     */
    static src(subPath?: string): string;
    /**
     * Return the app path of your project.
     */
    static app(subPath?: string): string;
    /**
     * Return the bootstrap path of your project.
     */
    static bootstrap(subPath?: string): string;
    /**
     * Return the config path of your project.
     */
    static config(subPath?: string): string;
    /**
     * Return the database path of your project.
     */
    static database(subPath?: string): string;
    /**
     * Return the lang path of your project.
     */
    static lang(subPath?: string): string;
    /**
     * Return the node_modules path of your project.
     */
    static nodeModules(subPath?: string): string;
    /**
     * Return the providers' path of your project.
     */
    static providers(subPath?: string): string;
    /**
     * Return the public path of your project.
     */
    static public(subPath?: string): string;
    /**
     * Return the resources' path of your project.
     */
    static resources(subPath?: string): string;
    /**
     * Return the routes' path of your project.
     */
    static routes(subPath?: string): string;
    /**
     * Return the storage path of your project.
     */
    static storage(subPath?: string): string;
    /**
     * Return the tests' path of your project.
     */
    static tests(subPath?: string): string;
    /**
     * Return the logs' path of your project.
     */
    static logs(subPath?: string): string;
    /**
     * Return the views' path of your project.
     */
    static views(subPath?: string): string;
    /**
     * Return the assets' path of your project.
     */
    static assets(subPath?: string): string;
    /**
     * Return the locales' path of your project.
     */
    static locales(subPath?: string): string;
    /**
     * Return the facades' path of your project.
     */
    static facades(subPath?: string): string;
    /**
     * Return the stubs' path of your project.
     */
    static stubs(subPath?: string): string;
    /**
     * Return the http path of your project.
     */
    static http(subPath?: string): string;
    /**
     * Return the console path of your project.
     */
    static console(subPath?: string): string;
    /**
     * Return the services' path of your project.
     */
    static services(subPath?: string): string;
    /**
     * Return the repositories' path of your project.
     */
    static repositories(subPath?: string): string;
    /**
     * Return the migrations' path of your project.
     */
    static migrations(subPath?: string): string;
    /**
     * Return the seeders' path of your project.
     */
    static seeders(subPath?: string): string;
    /**
     * Return the .bin path of your node_modules.
     */
    static bin(subPath?: string): string;
    /**
     * Return the tmp path of your vm.
     */
    static vmTmp(subPath?: string): string;
    /**
     * Return the home path of your vm.
     */
    static vmHome(subPath?: string): string;
    /**
     * Return the execution path of where this method
     * is being called.
     */
    static this(subPath?: string, stackIndex?: number): string;
    /**
     * Remove additional slashes from path.
     */
    private static removeSlashes;
}
