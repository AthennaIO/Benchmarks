/**
 * @athenna/common
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { PathDirs } from '#src/Types/PathDirs';
export declare class Path {
    static dirs: PathDirs;
    /**
     * Merge your custom directories with the default directories.
     */
    static mergeDirs(dirs: PathDirs): typeof Path;
    /**
     * Return js or ts extension depending on IS_TS.
     */
    static ext(): string;
    /**
     * Return the pwd path of your project.
     */
    static pwd(subPath?: string): string;
    /**
     * Return the src path of your project.
     */
    static src(subPath?: string): string;
    /**
     * Set the directory of src folder.
     */
    static setSrc(directory: string): typeof Path;
    /**
     * Return the bin path of your project.
     */
    static bin(subPath?: string): string;
    /**
     * Set the directory of bin folder.
     */
    static setBin(directory: string): typeof Path;
    /**
     * Return the app path of your project.
     */
    static app(subPath?: string): string;
    /**
     * Set the directory of app folder.
     */
    static setApp(directory: string): typeof Path;
    /**
     * Return the bootstrap path of your project.
     */
    static bootstrap(subPath?: string): string;
    /**
     * Set the directory of bootstrap folder.
     */
    static setBootstrap(directory: string): typeof Path;
    /**
     * Return the config path of your project.
     */
    static config(subPath?: string): string;
    /**
     * Set the directory of config folder.
     */
    static setConfig(directory: string): typeof Path;
    /**
     * Return the database path of your project.
     */
    static database(subPath?: string): string;
    /**
     * Set the directory of database folder.
     */
    static setDatabase(directory: string): typeof Path;
    /**
     * Return the lang path of your project.
     */
    static lang(subPath?: string): string;
    /**
     * Set the directory of lang folder.
     */
    static setLang(directory: string): typeof Path;
    /**
     * Return the node_modules path of your project.
     */
    static nodeModules(subPath?: string): string;
    /**
     * Set the directory of node_modules folder.
     */
    static setNodeModules(directory: string): typeof Path;
    /**
     * Return the providers' path of your project.
     */
    static providers(subPath?: string): string;
    /**
     * Set the directory of providers folder.
     */
    static setProviders(directory: string): typeof Path;
    /**
     * Return the facades' path of your project.
     */
    static facades(subPath?: string): string;
    /**
     * Set the directory of facades folder.
     */
    static setFacades(directory: string): typeof Path;
    /**
     * Return the public path of your project.
     */
    static public(subPath?: string): string;
    /**
     * Set the directory of public folder.
     */
    static setPublic(directory: string): typeof Path;
    /**
     * Return the resources' path of your project.
     */
    static resources(subPath?: string): string;
    /**
     * Set the directory of resources folder.
     */
    static setResources(directory: string): typeof Path;
    /**
     * Return the routes' path of your project.
     */
    static routes(subPath?: string): string;
    /**
     * Set the directory of routes folder.
     */
    static setRoutes(directory: string): typeof Path;
    /**
     * Return the storage path of your project.
     */
    static storage(subPath?: string): string;
    /**
     * Set the directory of storage folder.
     */
    static setStorage(directory: string): typeof Path;
    /**
     * Return the tests' path of your project.
     */
    static tests(subPath?: string): string;
    /**
     * Set the directory of tests folder.
     */
    static setTests(directory: string): typeof Path;
    /**
     * Return the logs' path of your project.
     */
    static logs(subPath?: string): string;
    /**
     * Set the directory of logs folder.
     */
    static setLogs(directory: string): typeof Path;
    /**
     * Return the views' path of your project.
     */
    static views(subPath?: string): string;
    /**
     * Set the directory of views folder.
     */
    static setViews(directory: string): typeof Path;
    /**
     * Return the static' path of your project.
     */
    static static(subPath?: string): string;
    /**
     * Set the directory of static folder.
     */
    static setStatic(directory: string): typeof Path;
    /**
     * Return the assets' path of your project.
     */
    static assets(subPath?: string): string;
    /**
     * Set the directory of assets folder.
     */
    static setAssets(directory: string): typeof Path;
    /**
     * Return the locales' path of your project.
     */
    static locales(subPath?: string): string;
    /**
     * Set the directory of locales folder.
     */
    static setLocales(directory: string): typeof Path;
    /**
     * Return the stubs' path of your project.
     */
    static stubs(subPath?: string): string;
    /**
     * Set the directory of stubs folder.
     */
    static setStubs(directory: string): typeof Path;
    /**
     * Return the http path of your project.
     */
    static http(subPath?: string): string;
    /**
     * Set the directory of http folder.
     */
    static setHttp(directory: string): typeof Path;
    /**
     * Return the console path of your project.
     */
    static console(subPath?: string): string;
    /**
     * Set the directory of console folder.
     */
    static setConsole(directory: string): typeof Path;
    /**
     * Return the services' path of your project.
     */
    static services(subPath?: string): string;
    /**
     * Set the directory of services folder.
     */
    static setServices(directory: string): typeof Path;
    /**
     * Return the repositories' path of your project.
     */
    static repositories(subPath?: string): string;
    /**
     * Set the directory of repositories folder.
     */
    static setRepositories(directory: string): typeof Path;
    /**
     * Return the commands' path of your project.
     */
    static commands(subPath?: string): string;
    /**
     * Set the directory of commands folder.
     */
    static setCommands(directory: string): typeof Path;
    /**
     * Return the controllers' path of your project.
     */
    static controllers(subPath?: string): string;
    /**
     * Set the directory of controllers folder.
     */
    static setControllers(directory: string): typeof Path;
    /**
     * Return the exceptions' path of your project.
     */
    static exceptions(subPath?: string): string;
    /**
     * Set the directory of exceptions folder.
     */
    static setExceptions(directory: string): typeof Path;
    /**
     * Return the middlewares' path of your project.
     */
    static middlewares(subPath?: string): string;
    /**
     * Set the directory of middlewares folder.
     */
    static setMiddlewares(directory: string): typeof Path;
    /**
     * Return the interceptors' path of your project.
     */
    static interceptors(subPath?: string): string;
    /**
     * Set the directory of interceptors folder.
     */
    static setInterceptors(directory: string): typeof Path;
    /**
     * Return the terminators' path of your project.
     */
    static terminators(subPath?: string): string;
    /**
     * Set the directory of terminators folder.
     */
    static setTerminators(directory: string): typeof Path;
    /**
     * Return the migrations' path of your project.
     */
    static migrations(subPath?: string): string;
    /**
     * Set the directory of migrations folder.
     */
    static setMigrations(directory: string): typeof Path;
    /**
     * Return the seeders' path of your project.
     */
    static seeders(subPath?: string): string;
    /**
     * Set the directory of seeders folder.
     */
    static setSeeders(directory: string): typeof Path;
    /**
     * Return the .bin path of your node_modules.
     */
    static nodeModulesBin(subPath?: string): string;
    /**
     * Set the directory of .bin folder of your node_modules.
     */
    static setNodeModulesBin(directory: string): typeof Path;
    /**
     * Return the tmp path of your vm.
     */
    static vmTmp(subPath?: string): string;
    /**
     * Return the home path of your vm.
     */
    static vmHome(subPath?: string): string;
    /**
     * Return the execution path of where this method
     * is being called.
     */
    static this(subPath?: string, stackIndex?: number): string;
    /**
     * Remove additional slashes from path.
     */
    private static removeSlashes;
}
