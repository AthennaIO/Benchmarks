/**
 * @athenna/core
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Path } from '@athenna/common';
import { BaseCommand, Argument } from '@athenna/artisan';
export class MakeFacadeCommand extends BaseCommand {
    static signature() {
        return 'make:facade';
    }
    static description() {
        return 'Make a new facade file.';
    }
    async handle() {
        this.logger.simple('({bold,green} [ MAKING FACADE ])\n');
        const destination = Config.get('rc.commands.make:facade.destination', Path.facades());
        const file = await this.generator
            .fileName(this.name)
            .destination(destination)
            .template('facade')
            .setNameProperties(true)
            .make();
        this.logger.success(`Facade ({yellow} "${file.name}") successfully created.`);
    }
}
__decorate([
    Argument({
        description: 'The facade name.'
    }),
    __metadata("design:type", String)
], MakeFacadeCommand.prototype, "name", void 0);
