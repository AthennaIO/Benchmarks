/**
 * @athenna/core
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Module } from '@athenna/common';
import { Option, BaseCommand, Commander } from '@athenna/artisan';
export class TestCommand extends BaseCommand {
    static signature() {
        return 'test';
    }
    static description() {
        return 'Run the tests of your application.';
    }
    static commander(commander) {
        return commander
            .allowUnknownOption()
            .option('--tests', 'Specify test titles: --tests="shouldBeOk,shouldNotBeOk"')
            .option('--groups', 'Specify group titles: --groups="AppControllerTest,AppServiceTest"')
            .option('--files', 'Specify files to match and run: --files="AppControllerTest.ts,AppServiceTest.ts"')
            .option('--tags', 'Specify tags to match and run: --tags="unit"')
            .option('--force-exit', 'Enable/disable force exit')
            .option('--timeout', 'Define timeout for all tests: --timeout 3000');
    }
    async handle() {
        process.env.APP_ENV = this.env || 'test';
        process.env.NODE_ENV = this.env || 'test';
        const entrypoint = Config.get('rc.commands.test.entrypoint', Path.bootstrap(`test.${Path.ext()}`));
        process.argv.splice(2, 1);
        await Module.resolve(entrypoint, Config.get('rc.parentURL'));
    }
}
__decorate([
    Option({ signature: '--env <env>' }),
    __metadata("design:type", String)
], TestCommand.prototype, "env", void 0);
