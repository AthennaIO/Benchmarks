/**
 * @athenna/core
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Path } from '@athenna/common';
import { sep, resolve, isAbsolute } from 'node:path';
import { BaseCommand, Argument } from '@athenna/artisan';
export class MakeServiceCommand extends BaseCommand {
    static signature() {
        return 'make:service';
    }
    static description() {
        return 'Make a new service file.';
    }
    async handle() {
        this.logger.simple('({bold,green} [ MAKING SERVICE ])\n');
        const file = await this.generator
            .path(this.getFilePath())
            .template('service')
            .setNameProperties(true)
            .make();
        this.logger.success(`Service ({yellow} "${file.name}") successfully created.`);
        const importPath = this.getImportPath(file.name);
        await this.rc.pushTo('services', importPath).save();
        this.logger.success(`Athenna RC updated: ({dim,yellow} [ services += "${importPath}" ])`);
    }
    /**
     * Get the file path where it will be generated.
     */
    getFilePath() {
        return this.getDestinationPath().concat(`${sep}${this.name}.${Path.ext()}`);
    }
    /**
     * Get the destination path for the file that will be generated.
     */
    getDestinationPath() {
        let destination = Config.get('rc.commands.make:service.destination', Path.services());
        if (!isAbsolute(destination)) {
            destination = resolve(Path.pwd(), destination);
        }
        return destination;
    }
    /**
     * Get the import path that should be registered in RC file.
     */
    getImportPath(fileName) {
        const destination = this.getDestinationPath();
        return `${destination
            .replace(Path.pwd(), '')
            .replace(/\\/g, '/')
            .replace('/', '#')}/${fileName}`;
    }
}
__decorate([
    Argument({
        description: 'The service name.',
    })
], MakeServiceCommand.prototype, "name", void 0);
