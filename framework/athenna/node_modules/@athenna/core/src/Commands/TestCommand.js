/**
 * @athenna/core
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Module } from '@athenna/common';
import { BaseCommand, Option } from '@athenna/artisan';
export class TestCommand extends BaseCommand {
    static signature() {
        return 'test';
    }
    static description() {
        return 'Run the tests of your application.';
    }
    // TODO Verify if this command still makes sense to exist.
    async handle() {
        if (this.env !== '') {
            process.env.NODE_ENV = this.env;
        }
        const entrypoint = Config.get('rc.commands.test.entrypoint', Path.bootstrap(`test.${Path.ext()}`));
        process.argv.splice(2, 1);
        await Module.resolve(entrypoint, Config.get('rc.meta'));
    }
}
__decorate([
    Option({
        signature: '-e, --env <env>',
        description: 'Change the environment where your tests wil run.',
        default: 'test',
    })
], TestCommand.prototype, "env", void 0);
