/**
 * @athenna/core
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Options } from '@athenna/common';
import { ServerImpl } from '@athenna/http';
import { AfterAll, BeforeAll } from '@athenna/test';
import { Ignite } from '@athenna/core';
export class BaseHttpTest {
    constructor() {
        this.httpOptions = {};
        this.igniteOptions = {};
    }
    async baseBeforeAll() {
        this.ignite = await new Ignite().load(Path.toHref(Path.bootstrap(`test.${Path.ext()}`)), this.getIgniteOptions());
        this.httpServer = await this.ignite.httpServer(this.getHttpOptions());
    }
    async baseAfterAll() {
        await this.httpServer.close();
    }
    getHttpOptions() {
        return Options.create(this.httpOptions, {});
    }
    getIgniteOptions() {
        return Options.create(this.igniteOptions, {
            bootLogs: false,
            loadConfigSafe: false,
            environments: ['test']
        });
    }
}
__decorate([
    BeforeAll(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], BaseHttpTest.prototype, "baseBeforeAll", null);
__decorate([
    AfterAll(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], BaseHttpTest.prototype, "baseAfterAll", null);
