/**
 * @athenna/core
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { ServiceProvider } from '@athenna/ioc';
export declare class LoadHelper {
    /**
     * The providers modules loaded.
     */
    static providers: (typeof ServiceProvider)[];
    /**
     * The file paths that are already preloaded.
     */
    static alreadyPreloaded: string[];
    /**
     * REGOOT (Register and Boot) providers.
     */
    static regootProviders(): Promise<void>;
    /**
     * Execute the "boot" method of all the providers loaded.
     */
    static bootProviders(): Promise<void>;
    /**
     * Execute the "register" method of all the providers loaded.
     */
    static registerProviders(): Promise<void>;
    /**
     * Execute the "shutdown" method of all the providers loaded.
     */
    static shutdownProviders(): Promise<void>;
    /**
     * Preload all the files inside "rc.preloads" configuration by importing.
     */
    static preloadFiles(): Promise<void>;
    /**
     * Get all the providers from .athennarc.json file. Also, will return only
     * the providers have the same value of "rc.s".
     */
    static loadBootableProviders(): Promise<void>;
    /**
     * Verify if provider is already registered.
     */
    private static isRegistered;
    /**
     * Verify if provider can be bootstrapped.
     */
    private static canBeBootstrapped;
    /**
     * Resolve the import path by meta URL and import it.
     */
    private static resolvePath;
}
