/**
 * @athenna/ioc
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { Ioc } from '#src/Container/Ioc';
import { Module } from '@athenna/common';
export class ServiceProvider {
    /**
     * The Ioc container instance.
     */
    container;
    constructor() {
        this.container = new Ioc();
    }
    /**
     * Set where the environment of application where this provider can
     * be registered or not.
     */
    get environment() {
        return ['*'];
    }
    /**
     * All the container bindings that should be registered.
     */
    get bindings() {
        return {};
    }
    /**
     * All the container instances that should be registered.
     */
    get instances() {
        return {};
    }
    /**
     * All the container singletons that should be registered.
     */
    get singletons() {
        return {};
    }
    /**
     * Register any application services.
     */
    register() {
        //
    }
    /**
     * Bootstrap any application services.
     */
    boot() {
        //
    }
    /**
     * Shutdown any application services.
     */
    shutdown() {
        //
    }
    /**
     * Register all three attributes defined within
     * ServiceProvider.
     */
    registerAttributes() {
        Object.keys(this.bindings).forEach(alias => {
            this.container.bind(alias, Module.get(this.bindings[alias]));
        });
        Object.keys(this.instances).forEach(alias => {
            this.container.instance(alias, Module.get(this.instances[alias]));
        });
        Object.keys(this.singletons).forEach(alias => {
            this.container.singleton(alias, Module.get(this.singletons[alias]));
        });
        return this;
    }
}
