/**
 * @athenna/view
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { Edge } from 'edge.js';
import { Config } from '@athenna/config';
import { File, Is } from '@athenna/common';
import { resolve, isAbsolute } from 'node:path';
import { EmptyComponentException } from '#src/Exceptions/EmptyComponentException';
import { NotFoundTemplateException } from '#src/Exceptions/NotFoundTemplateException';
import { AlreadyExistComponentException } from '#src/Exceptions/AlreadyExistComponentException';
export class ViewImpl {
    /**
     * Edge instance that is handling all the views.
     */
    edge;
    constructor() {
        this.edge = new Edge(Config.get('view.edge', {}));
    }
    /**
     * Render some view with optional data included.
     *
     * @example
     * ```ts
     * View.render('welcome', { greeting: 'Hello world' })
     * ```
     */
    async render(template, data) {
        if (!this.isMountedOrIsTemplate(template)) {
            throw new NotFoundTemplateException(template);
        }
        return this.edge.render(template, data);
    }
    /**
     * Render some view asynchronously with optional data included.
     *
     * @example
     * ```ts
     * View.renderSync('welcome', { greeting: 'Hello world' })
     * ```
     */
    renderSync(template, data) {
        if (!this.isMountedOrIsTemplate(template)) {
            throw new NotFoundTemplateException(template);
        }
        return this.edge.renderSync(template, data);
    }
    /**
     * Render some raw edge content with optional data included.
     *
     * @example
     * ```ts
     * View.renderRaw('Hello {{ value }}', { value: 'World!' })
     * ```
     */
    async renderRaw(content, data) {
        return this.edge.renderRaw(content, data);
    }
    /**
     * Render some raw edge content asynchronously with optional
     * data included.
     *
     * @example
     * ```ts
     * View.renderRawSync('Hello {{ value }}', { value: 'World!' })
     * ```
     */
    renderRawSync(content, data) {
        return this.edge.renderRawSync(content, data);
    }
    /**
     * Add a new property to templates. The properties registered
     * here will be available to all the templates. You can use
     * this method to update properties too.
     *
     * @example
     * ```ts
     * View
     *  .addProperty('usernameOne', 'txsoura')
     *  .addProperty('usernameTwo', 'jlenon7')
     *  .addProperty('time', () => new Date().getTime())
     * ```
     */
    addProperty(key, value) {
        this.edge.global(key, value);
        return this;
    }
    /**
     * Remove some property from views registered using
     * "addProperty" method.
     *
     * @example
     * ```ts
     * View
     *  .addProperty('testing', '')
     *  .removeProperty('testing')
     * ```
     */
    removeProperty(key) {
        if (!this.edge.GLOBALS[key]) {
            return this;
        }
        delete this.edge.GLOBALS[key];
        return this;
    }
    /**
     * Create a new view disk. View disks can be used
     * to register multiple views at the same time.
     *
     * Imagine these three paths:
     *
     * resources/views/admin/listUsers.edge\
     * resources/views/admin/createUser.edge\
     * resources/views/admin/details/listUserDetails.edge
     *
     * @example
     * ```ts
     * View.createViewDisk('admin', Path.views('admin'))
     *
     * const users = [...]
     *
     * View.render('admin::listUsers', { users })
     * View.render('admin::createUser')
     * View.render('admin::details/listUserDetails', { users })
     * ```
     */
    createViewDisk(name, path) {
        if (this.hasViewDisk(name)) {
            this.removeViewDisk(name);
        }
        if (!isAbsolute(path)) {
            path = resolve(Path.pwd(), path);
        }
        this.edge.mount(name, path);
        return this;
    }
    /**
     * Delete a view disk that was registered using
     * the "createViewDisk" method.
     *
     * @example
     * ```ts
     * View
     *  .createViewDisk('admin', Path.views('admin'))
     *  .removeViewDisk('admin')
     * ```
     */
    removeViewDisk(name) {
        if (!this.hasViewDisk(name)) {
            return this;
        }
        this.edge.unmount(name);
        return this;
    }
    /**
     * Verify if some view disk exists.
     *
     * @example
     *  View.createViewDisk('testing', Path.views('testing'))
     *
     *  View.hasViewDisk('testing') // true
     *  View.hasViewDisk('testing::subTesting') // true
     *  View.hasViewDisk('testing::subTesting/notFound') // false
     */
    hasViewDisk(name) {
        try {
            const path = this.edge.loader.makePath(name);
            this.edge.loader.resolve(path);
            return true;
        }
        catch (err) {
            const has = this.edge.loader.mounted[name];
            if (has) {
                return true;
            }
            return false;
        }
    }
    /**
     * Create a in-memory component.
     *
     * @example
     * ```ts
     * View.createComponent('button', '<button class="{{ this.type }}">@!yield($slots.main())</button>')
     * ```
     *
     * In-memory components could be used this
     * way (Ignore the "\\" value in the example):
     *
     * @example
     * ```edge
     * \@component('button', type = 'primary')
     *   Get started
     * \@endcomponent
     * ```
     */
    createComponent(name, component) {
        if (!Is.Defined(component)) {
            throw new EmptyComponentException(name);
        }
        if (this.hasComponent(name)) {
            throw new AlreadyExistComponentException(name);
        }
        this.edge.registerTemplate(name, { template: component });
        return this;
    }
    /**
     * Verify if some component exists.
     *
     * @example
     *  View
     *    .createComponent('testing', '')
     *    .hasComponent('testing') // true
     */
    hasComponent(name) {
        return !!this.edge.loader.templates[name];
    }
    /**
     * Delete the component created using the "createComponent"
     * method.
     *
     * @example
     *  View
     *    .createComponent('testing', '')
     *    .removeComponent('testing')
     */
    removeComponent(name) {
        this.edge.removeTemplate(name);
        return this;
    }
    /**
     * Create a in-memory template. If the template name already exists, it
     * will be replaced.
     *
     * @example
     * ```ts
     * View.createTemplate('artisan::command', 'export class {{ namePascal }}')
     *
     * View.render('artisan::command', { namePascal: 'MyCommand' })
     * ```
     *
     * In-memory template could be used as components also
     * (Ignore the "\\" value in the example):
     *
     * @example
     * ```edge
     * \@component('artisan::command')
     *   Hello
     * \@endcomponent
     * ```
     */
    createTemplate(name, template) {
        if (this.hasTemplate(name)) {
            this.removeTemplate(name);
        }
        return this.createComponent(name, template);
    }
    /**
     * Same as "createTemplate" method but create the template by the path
     * instead. If the file path does not exist, the registration is ignored
     * (no errors).
     *
     * @example
     * ```ts
     * const path = Path.resources('views/myTemplate.edge')
     *
     * View.createTemplateByPath('myTemplate', path)
     * ```
     */
    createTemplateByPath(name, templatePath) {
        const file = new File(templatePath, Buffer.from(''));
        if (!file.fileExists) {
            return this;
        }
        return this.createTemplate(name, file.getContentSync().toString());
    }
    /**
     * Verify if some template exists.
     *
     * @example
     *  View
     *    .createTemplate('testing', '')
     *    .hasTemplate('testing') // true
     */
    hasTemplate(name) {
        return this.hasComponent(name);
    }
    /**
     * Delete the template created using the "createTemplate"
     * method.
     *
     * @example
     *  View
     *    .createTemplate('testing', '')
     *    .removeTemplate('testing')
     */
    removeTemplate(name) {
        if (!this.hasTemplate(name)) {
            return this;
        }
        return this.removeComponent(name);
    }
    /**
     * Verify if Edge has the template name loaded or mounted.
     */
    isMountedOrIsTemplate(template) {
        return this.hasViewDisk(template) || this.hasTemplate(template);
    }
}
