/**
 * @athenna/artisan
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { Command as Commander } from 'commander';
export declare class CommanderHandler {
    /**
     * Holds the commander error handler.
     */
    private static exceptionHandler;
    /**
     * The commander instance.
     */
    private static commander;
    /**
     * Get the commander instance.
     */
    static getCommander<T = Commander>(): T;
    /**
     * Parse the command called in the console and execute.
     */
    static parse(argv: string[]): Promise<Commander>;
    /**
     * Set the exception handler for commander action method.
     */
    static setExceptionHandler(handler: any): void;
    /**
     * Bind the exception handler if exists inside the action.
     */
    static bindHandler(target: any): any;
    /**
     * Set the CLI version. By default, the version set will be of the Athenna.
     */
    static setVersion(version?: string): typeof CommanderHandler;
    /**
     * Get all commands registered inside commander or by alias.
     */
    static getCommands(alias?: string): Record<string, any>;
}
