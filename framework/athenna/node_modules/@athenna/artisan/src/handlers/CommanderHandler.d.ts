/**
 * @athenna/artisan
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { Commander } from '#src/artisan/Commander';
import type { Argument, Option, OptionValues } from 'commander';
export declare class CommanderHandler {
    /**
     * Holds the commander error handler.
     */
    static exceptionHandler: any;
    /**
     * The commander instance.
     */
    static commander: Commander;
    /**
     * Get a new commander instance with default options.
     */
    static instantiate(): Commander;
    /**
     * Simple helper to reconstruct the commander instance.
     */
    static reconstruct(): void;
    /**
     * Parse the command called in the console and execute.
     */
    static parse(argv: string[]): Promise<Commander>;
    /**
     * Bind the exception handler if exists inside the action.
     */
    static bindHandler(target: any): any;
    /**
     * Set the CLI version. By default, the version set will be of the Athenna.
     */
    static setVersion(version?: string): typeof CommanderHandler;
    /**
     * Get the arguments of a command.
     */
    static getCommandArgs(name: string): Argument[];
    /**
     * Get the options of a command.
     */
    static getCommandOpts(name: string): Option[];
    /**
     * Get the option values of a command.
     */
    static getCommandOptsValues(name: string): OptionValues;
    /**
     * Get specific command my signature.
     */
    static getCommand(signature: string): Commander;
    /**
     * Get all commands registered inside commander.
     */
    static getCommands(): Commander[];
    /**
     * Verify if the actual commander instance has a command
     * with the given signature.
     */
    static hasCommand(signature: string): boolean;
    /**
     * Get commands with arguments and descriptions registered inside commander.
     */
    static getCommandsInfo(alias?: string): Record<string, any>;
}
