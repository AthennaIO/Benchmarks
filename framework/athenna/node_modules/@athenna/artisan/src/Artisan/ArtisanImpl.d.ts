/**
 * @athenna/artisan
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { Commander } from '#src/Artisan/Commander';
import { BaseCommand } from '#src/Artisan/BaseCommand';
export declare class ArtisanImpl {
    /**
     * Register the command if it is not registered yet.
     */
    register(command: any): Commander;
    /**
     * Create commands like a route.
     *
     * @example
     * ```ts
     * Artisan.route('hello', function (hello: string, options: any) {
     *   console.log(hello)
     *   console.log(options.hello)
     * })
     *  .argument('<hello>', 'Description for hello arg.')
     *  .option('--hello', 'Description for hello option.')
     * ```
     */
    route(signature: string, handler: (this: BaseCommand, ...args: any[]) => Promise<void>): Commander;
    /**
     * Call an Artisan command.
     *
     * @example
     * ```ts
     * // Call command ignoring settings, loadApp, stayAlive and environments.
     * Artisan.call('serve --watch')
     *
     * // Call command and handle settings.
     * Artisan.call('serve --watch', false)
     * ```
     */
    call(command: string, ignoreSettings?: boolean): Promise<void>;
    /**
     * Call an Artisan command inside a child process.
     * This method needs to execute a file to bootstrap
     * under the hood, by default the "Path.pwd(`artisan.${Path.ext()}`)"
     * is used.
     *
     * @example
     * ```ts
     * Artisan.callInChild('serve --watch')
     * // or
     * Artisan.callInChild('serve --watch', Path.pwd('other-artisan.ts'))
     * ```
     */
    callInChild(command: string, path?: string): Promise<{
        stdout: string;
        stderr: string;
    }>;
    /**
     * Search for the command settings, set the CLI version and parse the
     * "argv" to execute the command.
     */
    parse(argv: string[], appName?: string): Promise<void>;
    /**
     * Parse the command with the settings.
     */
    private parseWithSettings;
}
