/**
 * @athenna/artisan
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { File } from '@athenna/common';
export declare class Generator {
    private _path;
    private _template;
    private _properties;
    private _setNameProperties;
    /**
     * Set the file path where the file will be generated.
     * Rememeber that the file name in the path will be used
     * to define the name properties.
     */
    path(path: string): Generator;
    /**
     * Set the template name to be resolved by the
     * athenna/view package.
     */
    template(name: string): Generator;
    /**
     * Set custom properties to exists inside the template.
     */
    properties(properties: any): Generator;
    /**
     * Set if generator should set name properties or not. Custom
     * properties will always be the preference. The following
     * properties will exist in templates when using this method:
     *
     * ```ts
     * {
     *   nameUp: 'MYCONTROLLER',
     *   nameCamel: 'myController',
     *   namePlural: 'MyControllers',
     *   namePascal: 'MyController',
     *   namePluralCamel: 'myControllers',
     *   namePluralPascal: 'MyControllers',
     *   nameUpTimestamp: 'MYCONTROLLER1675363499530',
     *   nameCamelTimestamp: 'myController1675363499530',
     *   namePluralTimestamp: 'MyControllers1675363499530',
     *   namePascalTimestamp: 'MyController1675363499530',
     *   namePluralCamelTimestamp: 'myControllers1675363499530',
     *   namePluralPascalTimestamp: 'MyControllers1675363499530',
     *   ...properties, // <- Custom properties preference
     * }
     * ```
     */
    setNameProperties(set: boolean): Generator;
    /**
     * Make a new file using templates.
     *
     * @example
     * ```ts
     * const path = Path.http(`Controllers/MyController.${Path.ext()}`)
     * const template = 'artisan::controller'
     * const properties = { custom: 'custom-props-for-template' }
     *
     * const file = await this.generator
     *  .path(path)
     *  .template(template)
     *  .properties(properties)
     *  .setNameProperties(true)
     *  .make()
     *
     * this.logger.success(`Controller ({yellow} "${file.name}") successfully created.`)
     * ```
     */
    make(): Promise<File>;
}
