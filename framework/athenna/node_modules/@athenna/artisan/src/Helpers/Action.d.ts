/**
 * @athenna/artisan
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
export declare class Action {
    /**
     * The main action that is being executed.
     *
     * @example
     *  'CREATE'
     */
    private action;
    /**
     * Holds the biggest action of the Action instance.
     * This property is useful to determine how much spaces
     * we need to add to the log message before rendering it.
     *
     * @example
     *  'CREATE'
     */
    private biggestAction;
    constructor(action: string);
    /**
     * Log a succeeded action in the console.
     *
     * @example
     * ```ts
     * const action = this.logger.action('create')
     *
     * action.succeeded('app/Services/Service.ts')
     * ```
     * Output:
     * ```bash
     * CREATE: app/Services/Service.ts
     * ```
     */
    succeeded(msg: string): void;
    /**
     * Log a skipped action in the console.
     *
     * @example
     * ```ts
     * const action = this.logger.action('create')
     *
     * action.skipped('app/Services/Service.ts', 'File already exists')
     * ```
     * Output:
     * ```bash
     * SKIP:   app/Services/Service.ts (File already exists)
     * ```
     */
    skipped(msg: string, reason?: string): void;
    /**
     * Log a failed action in the console.
     *
     * @example
     * ```ts
     * const action = this.logger.action('create')
     *
     * action.failed('app/Services/Service.ts', 'Something went wrong')
     * ```
     * Output:
     * ```bash
     * ERROR:  app/Services/Service.ts (Something went wrong)
     * ```
     */
    failed(msg: string, reason?: string): void;
    /**
     * Get only the necessary spaces for the action. This
     * method will use the "biggestAction" property to determine
     * how much space the action in the method argument will need
     * to match the column pattern.
     */
    private getSpacesFor;
    /**
     * Get the biggest action. If the action of the method argument
     * is not bigger than 'ERROR' action, then the biggest action is
     * 'ERROR', because 'SKIP' is not bigger than 'ERROR'.
     */
    private getBiggestAction;
    /**
     * Simple vanilla logger implementation to work the same way
     * of Artisan logger.
     */
    private log;
}
