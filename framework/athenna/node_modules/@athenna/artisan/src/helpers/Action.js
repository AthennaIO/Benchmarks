/**
 * @athenna/artisan
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { Log } from '@athenna/logger';
import { Color } from '@athenna/common';
export class Action {
    constructor(action) {
        this.action = action;
        this.biggestAction = this.getBiggestAction(action);
    }
    /**
     * Log a succeeded action in the console.
     *
     * @example
     * ```ts
     * const action = this.logger.action('create')
     *
     * action.succeeded('app/Services/Service.ts')
     * ```
     * Output:
     * ```bash
     * CREATE: app/Services/Service.ts
     * ```
     */
    succeeded(msg) {
        const spaces = this.getSpacesFor(this.action);
        const action = Color.green.bold(`${this.action.toUpperCase()}:`);
        this.log(`${action}${spaces}${msg}`);
    }
    /**
     * Log a skipped action in the console.
     *
     * @example
     * ```ts
     * const action = this.logger.action('create')
     *
     * action.skipped('app/Services/Service.ts', 'File already exists')
     * ```
     * Output:
     * ```bash
     * SKIP:   app/Services/Service.ts (File already exists)
     * ```
     */
    skipped(msg, reason) {
        const spaces = this.getSpacesFor('SKIP');
        const action = Color.cyan.bold('SKIP:');
        let logMsg = `${action}${spaces}${msg}`;
        if (reason) {
            logMsg = logMsg.concat(Color.dim(` (${reason})`));
        }
        this.log(logMsg);
    }
    /**
     * Log a failed action in the console.
     *
     * @example
     * ```ts
     * const action = this.logger.action('create')
     *
     * action.failed('app/Services/Service.ts', 'Something went wrong')
     * ```
     * Output:
     * ```bash
     * ERROR:  app/Services/Service.ts (Something went wrong)
     * ```
     */
    failed(msg, reason) {
        const spaces = this.getSpacesFor('ERROR');
        const action = Color.red.bold('ERROR:');
        let logMsg = `${action}${spaces}${msg}`;
        if (reason) {
            logMsg = logMsg.concat(Color.dim(` (${reason})`));
        }
        this.log(logMsg);
    }
    /**
     * Get only the necessary spaces for the action. This
     * method will use the "biggestAction" property to determine
     * how much space the action in the method argument will need
     * to match the column pattern.
     */
    getSpacesFor(action) {
        let string = ' ';
        if (action === this.biggestAction) {
            return string;
        }
        for (let i = 0; i < this.biggestAction.length - action.length; i++) {
            string = string.concat(' ');
        }
        return string;
    }
    /**
     * Get the biggest action. If the action of the method argument
     * is not bigger than 'ERROR' action, then the biggest action is
     * 'ERROR', because 'SKIP' is not bigger than 'ERROR'.
     */
    getBiggestAction(action) {
        if (action.length < 'ERROR'.length) {
            return 'ERROR';
        }
        return action;
    }
    /**
     * Simple vanilla logger implementation to work the same way
     * of Artisan logger.
     */
    log(...args) {
        const level = Config.get('logging.channels.console.trace', 'trace');
        const driver = Config.get('logging.channels.console.driver', 'console');
        return Log.standalone({ level, driver }).success(...args);
    }
}
