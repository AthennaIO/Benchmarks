/**
 * @athenna/artisan
 *
 * (c) João Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { type Ora } from 'ora';
import type { TaskCallback } from '#src/types/TaskCallback';
export type TaskMap = {
    title: string;
    cb: TaskCallback;
};
export declare class Task {
    /**
     * The tasks saved by "add" method.
     */
    private tasks;
    /**
     * Add a new task to be executed.
     *
     * @example
     * ```ts
     * await this.logger
     *    .task()
     *    .add('hello', async task => {
     *      await Exec.sleep(1000)
     *      await task.complete('world')
     *    })
     *    .run()
     * ```
     * Output:
     * ```bash
     * → hello 1005ms
     *   world
     * ```
     */
    add(title: string, cb: TaskCallback): Task;
    /**
     * Same as add but automatically handle the callback
     * depending on the promise result.
     *
     * @example
     * ```ts
     * await this.logger
     *    .task()
     *    .addPromise('hello', async () => {
     *      await Exec.sleep(1000)
     *    })
     *    .run()
     * ```
     * Output:
     * ```bash
     * → hello 1005ms
     * ```
     */
    addPromise(title: string, cb: () => Promise<any>): Task;
    /**
     * Run all the tasks added.
     *
     * @example
     * ```ts
     * await this.logger
     *    .task()
     *    .add('hello', async task => {
     *      await Exec.sleep(1000)
     *      await task.fail('Something went wrong')
     *    })
     *    .run()
     * ```
     * Output:
     * ```bash
     * → hello 1005ms
     *   Something went wrong
     * ```
     */
    run(): Promise<void>;
}
export declare class TaskManager {
    /**
     * The task map to manage.
     */
    task: TaskMap;
    /**
     * The time that the task has started running.
     */
    time: number;
    /**
     * The spinner instance to display feedback to the user.
     */
    spinner: Ora;
    /**
     * The next tasks title to be executed after this task.
     */
    nextTasksTitle: string;
    /**
     * The status of the task.
     */
    status: 'idle' | 'running' | 'fail' | 'complete';
    constructor(task: TaskMap, nextTasksTitle?: string[]);
    /**
     * Run the the task and return if the status was fail or
     * complete.
     */
    run(): Promise<'fail' | 'complete'>;
    /**
     * Complete the task by setting a red arrow and
     * persisting the task name with an error message.
     *
     * @example
     * ```ts
     * await task.fail('Something went wrong')
     * ```
     */
    fail(error?: any): Promise<void>;
    /**
     * Complete the task by setting a green arrow and
     * persisting the task name with or without a message.
     *
     * @example
     * ```ts
     * await task.complete('Finished')
     * ```
     */
    complete(message?: string): Promise<void>;
    /**
     * Get the time in MS that has been required to run the
     * task.
     */
    private getMs;
    /**
     * Get the message value painted if it exists.
     */
    private getMessage;
}
