/**
 * @athenna/artisan
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import 'reflect-metadata';
import { debug } from '#src/debug';
import { String } from '@athenna/common';
import { OPTIONS_KEY, ARGUMENTS_KEY } from '#src/constants/MetadataKeys';
export class Annotation {
    static setOption(target, key, options) {
        const optionMeta = {
            key,
            signatureName: options.signature,
            ...options
        };
        if (optionMeta.signatureName.includes('--')) {
            optionMeta.signatureName = optionMeta.signatureName.split('--')[1];
        }
        if (optionMeta.signatureName.startsWith('no-')) {
            optionMeta.signatureName = optionMeta.signatureName.split('no-')[1];
        }
        optionMeta.signatureName = String.toCamelCase(optionMeta.signatureName
            .replace(/<([^)]+)>/g, '')
            .replace(/\[([^)]+)]/g, '')
            .replace(/ /g, ''));
        const opts = this.getOptions(target);
        debug('Registering option %o', {
            target,
            ...optionMeta
        });
        opts.push(optionMeta);
        Reflect.defineMetadata(OPTIONS_KEY, opts, target);
        return this;
    }
    static setArgument(target, key, argument) {
        const args = this.getArguments(target);
        const argumentMeta = {
            key,
            signatureName: argument.signature
                .replace(/[[\]']+/g, '')
                .replace(/[<>']+/g, ''),
            ...argument
        };
        debug('Registering argument %o', {
            target,
            ...argumentMeta
        });
        args.push(argumentMeta);
        Reflect.defineMetadata(ARGUMENTS_KEY, args, target);
        return this;
    }
    static getOptions(target) {
        if (!Reflect.hasMetadata(OPTIONS_KEY, target)) {
            Reflect.defineMetadata(OPTIONS_KEY, [], target);
        }
        return Reflect.getMetadata(OPTIONS_KEY, target);
    }
    static getArguments(target) {
        if (!Reflect.hasMetadata(ARGUMENTS_KEY, target)) {
            Reflect.defineMetadata(ARGUMENTS_KEY, [], target);
        }
        return Reflect.getMetadata(ARGUMENTS_KEY, target);
    }
}
