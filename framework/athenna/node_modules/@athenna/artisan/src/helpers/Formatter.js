/**
 * @athenna/artisan
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { Command } from 'commander';
import { Color, Options } from '@athenna/common';
export class Formatter {
    static builder(cmd, help) {
        return new Formatter(cmd, help);
    }
    constructor(cmd, help) {
        this.termWidth = 0;
        this.itemSeparatorWidth = 0;
        this.helpWidth = 0;
        this.indent = '';
        this.moveOptions = false;
        this.matchRequiredArgs = /<(.*?)>/;
        this.matchOptionsAndOptionalArgs = /\[(.*?)\]/;
        this.sections = {
            description: '',
            usage: '',
            arguments: '',
            options: '',
            commands: '',
            globalOptions: ''
        };
        this.cmd = cmd;
        this.help = help;
        this.termWidth = help.padWidth(cmd, help);
        this.helpWidth = help.helpWidth || 80;
        this.itemSeparatorWidth = 2;
        this.indent = ' '.repeat(2);
        this.moveOptions = !cmd.parent && cmd.commands.length;
    }
    setUsage() {
        this.sections.usage = this.help.commandUsage(this.cmd);
        return this;
    }
    setDescription() {
        this.sections.description = this.help.commandDescription(this.cmd);
        return this;
    }
    setOptions() {
        this.sections.options = this.list(this.help
            .visibleOptions(this.cmd)
            .filter(option => {
            if (this.cmd.parent &&
                (option.long === '--help' || option.long === '--version')) {
                this.cmd.parent.addOption(option);
                return false;
            }
            return true;
        })
            .map(opt => this.option(this.help.optionTerm(opt), this.help.optionDescription(opt))));
        return this;
    }
    setCommands() {
        const commands = this.help.visibleCommands(this.cmd).map(c => {
            return this.command(this.help.subcommandTerm(c), this.help.subcommandDescription(c));
        });
        this.sections.commands = this.list(commands) || '';
        return this;
    }
    setArguments() {
        const args = this.help.visibleArguments(this.cmd).map(argument => {
            return this.item(this.help.argumentTerm(argument), this.help.argumentDescription(argument));
        });
        this.sections.arguments = this.list(args);
        return this;
    }
    setGlobalOptions() {
        this.sections.globalOptions = this.list(this.help
            .visibleGlobalOptions(this.cmd)
            .filter(opt => opt.long !== '--help' && opt.long !== '--version')
            .map(opt => this.option(this.help.optionTerm(opt), this.help.optionDescription(opt))));
        return this;
    }
    getOutput() {
        const output = [];
        output.push(Color.yellow.bold('Usage:'), this.indent + this.sections.usage, '');
        if (this.sections.description) {
            output.push(Color.yellow.bold('Description:'), this.indent + this.sections.description, '');
        }
        if (this.sections.arguments) {
            output.push(Color.yellow.bold('Arguments'), this.sections.arguments, '');
        }
        if (this.sections.options && !this.moveOptions) {
            output.push(Color.yellow.bold('Options:'), this.sections.options, '');
        }
        if (this.sections.commands.length) {
            output.push(Color.yellow.bold('Available Commands:'), this.sections.commands, '');
        }
        if (this.sections.options && this.moveOptions) {
            output.push(Color.yellow.bold('Options:'), this.sections.options, '');
        }
        if (this.sections.globalOptions) {
            output.push(Color.yellow.bold('Global Options:'), this.sections.globalOptions, '');
        }
        return output.join('\n');
    }
    command(cmd, desc) {
        if (desc) {
            const formattedTerm = this.term(cmd, { padEnd: true, greenColor: false });
            return this.help.wrap(`${Color.green(formattedTerm)}${desc}`, this.helpWidth - this.indent.length, this.termWidth + this.itemSeparatorWidth);
        }
        return this.term(cmd);
    }
    option(term, desc) {
        return this.command(term, desc);
    }
    item(term, desc) {
        if (desc) {
            const formattedTerm = this.term(term, {
                padEnd: true,
                argsColor: false,
                greenColor: false
            });
            return this.help.wrap(`${formattedTerm}${desc}`, this.helpWidth - this.indent.length, this.termWidth + this.itemSeparatorWidth);
        }
        return term;
    }
    list(values) {
        const list = values.join('\n').replace(/^/gm, this.indent).trim();
        return list ? this.indent + list : '';
    }
    term(term, options = {}) {
        options = Options.create(options, {
            argsColor: true,
            greenColor: true,
            padEnd: false
        });
        let formattedTerm = '';
        if (options.padEnd) {
            formattedTerm = term.padEnd(this.termWidth + this.itemSeparatorWidth);
        }
        if (options.argsColor) {
            formattedTerm = formattedTerm
                .replace(this.matchRequiredArgs, Color.yellow('$&'))
                .replace(this.matchOptionsAndOptionalArgs, Color.yellow('$&'));
        }
        if (options.greenColor) {
            return Color.green.bold(formattedTerm);
        }
        return formattedTerm;
    }
}
