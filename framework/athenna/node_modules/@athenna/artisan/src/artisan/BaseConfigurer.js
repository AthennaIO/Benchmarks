/**
 * @athenna/artisan
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { Rc } from '@athenna/config';
import { Color } from '@athenna/common';
import { parse, resolve } from 'node:path';
import { Npm } from '#src/helpers/command/Npm';
import { Prompt } from '#src/helpers/command/Prompt';
import { Logger } from '#src/helpers/command/Logger';
import { Generator } from '#src/helpers/command/Generator';
export class BaseConfigurer {
    constructor() {
        /**
         * The paths property is an object with the pwd and
         * configurer paths.
         *
         * Remembers that when running your Configurer, the
         * Path class will be referencing the path of your
         * application.
         */
        this.paths = {};
        /**
         * The Rc helper used to manage the .athennarc.json
         * file. Very useful to add commands, providers and
         * preloads properties in the file.
         */
        this.rc = Rc;
        /**
         * The Athenna colors ui kit. This methods uses the
         * Color helper class from @athenna/common package.
         * All the methods will return an instance of Chalk
         * API.
         */
        this.paint = Color;
        /**
         * The console logger. The console logger extends the
         * Logger class from "@athenna/logger" package.
         *
         * The driver used is the "console" with the "cli" formatter.
         */
        this.logger = new Logger();
        /**
         * The prompt used to make questions. The prompt uses the
         * Inquirer API to prompt the questions and retrieve the
         * answers.
         */
        this.prompt = new Prompt();
        /**
         * The generator used to make files. The generator uses the
         * `@athenna/view` package to generate files from templates. A
         * briefly knowledge about how to setup templates inside
         * `@athenna/view` is very good to use this helper.
         */
        this.generator = new Generator();
        /**
         * Use the npm helper to perform operations inside child
         * processes for linking and installing dependencies using
         * any kind of registry. The npm registry will always be the
         * default registry, but you can change it setting the registry
         * in options.
         */
        this.npm = new Npm();
    }
    /**
     * Set the path of the configurer.
     */
    setPath(path) {
        this.paths = {
            lib: resolve(parse(path).dir, '..'),
            configurer: path
        };
        return this;
    }
}
