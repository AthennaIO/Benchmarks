/**
 * @athenna/artisan
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { extname, resolve } from 'node:path';
import { Argument, BaseCommand } from '#src';
import { Color, Exec, File, Module } from '@athenna/common';
import { NotFoundConfigurerException } from '#src/Exceptions/NotFoundConfigurerException';
export class ConfigureCommand extends BaseCommand {
    libraries;
    static signature() {
        return 'configure';
    }
    static description() {
        return 'Configure one or more libraries inside your application.';
    }
    async handle() {
        for (const library of this.libraries) {
            await this.configure(library);
        }
    }
    async configure(library) {
        const isFile = this.isFile(library);
        const isInstalled = await this.isInstalled(library);
        if (!isFile && !isInstalled) {
            await this.logger.promiseSpinner(Exec.command(`npm install ${library}`), {
                text: `Installing ${Color.chalk.magenta(library)} library`,
                failText: `Failed to install ${Color.chalk.magenta(library)} library`,
                successText: `Library ${Color.chalk.magenta(library)} succesfully installed`,
            });
        }
        const path = isFile
            ? resolve(library)
            : Path.nodeModules(`${library}/configurer/index.js`);
        if (!(await File.exists(path))) {
            throw new NotFoundConfigurerException(path, library);
        }
        const Configurer = await Module.getFrom(path);
        await new Configurer().setPath(path).configure();
    }
    isFile(library) {
        return !!extname(library);
    }
    async isInstalled(library) {
        const json = await new File(Path.pwd('package.json')).getContentAsJson();
        if (json.dependencies[library]) {
            return true;
        }
        return !!json.devDependencies[library];
    }
}
__decorate([
    Argument({
        signature: '<libraries...>',
        description: 'One or more libraries to be configured. (Example: artisan configure @athenna/mail @athenna/database)',
    })
], ConfigureCommand.prototype, "libraries", void 0);
