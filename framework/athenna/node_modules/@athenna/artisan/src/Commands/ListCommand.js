/**
 * @athenna/artisan
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Argument, BaseCommand, CommanderHandler } from '#src';
export class ListCommand extends BaseCommand {
    static signature() {
        return 'list';
    }
    static description() {
        return 'List all commands available of the alias.';
    }
    async handle() {
        this.logger.simple(`({bold,green} [ LISTING ${this.alias.toUpperCase()} ])\n`);
        const commands = CommanderHandler.getCommands(this.alias);
        this.logger.column(commands, {
            columns: ['COMMAND', 'DESCRIPTION'],
        });
    }
}
__decorate([
    Argument()
], ListCommand.prototype, "alias", void 0);
