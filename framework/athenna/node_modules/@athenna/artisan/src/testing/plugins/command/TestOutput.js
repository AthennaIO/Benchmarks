/**
 * @athenna/artisan
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { inspect } from 'node:util';
export class TestOutput {
    constructor(assert, output) {
        this.assert = assert;
        this.output = output;
    }
    /**
     * Assert the exit code of the output.
     *
     * @example
     * ```js
     * output.assertExitCode(1)
     * ```
     */
    assertExitCode(code) {
        this.assert.deepEqual(this.output.exitCode, code);
    }
    /**
     * Assert the exit code of the output.
     *
     * @example
     * ```js
     * output.assertIsNotExitCode(1)
     * ```
     */
    assertIsNotExitCode(code) {
        this.assert.notDeepEqual(this.output.exitCode, code);
    }
    /**
     * Assert the command exists with zero exit code.
     */
    assertSucceeded() {
        return this.assertExitCode(0);
    }
    /**
     * Assert the command exists with non-zero exit code.
     */
    assertFailed() {
        return this.assertIsNotExitCode(0);
    }
    /**
     * Assert command to log the expected message.
     */
    assertLogged(message, stream) {
        const existsInStdout = this.output.stdout.includes(message);
        const existsInStderr = this.output.stderr.includes(message);
        if (!existsInStdout && !existsInStderr) {
            return this.assert.fail(`Expected message "${message}" to be logged in "stdout" or "stderr" but it was not logged.`);
        }
        if (stream === 'stdout' && existsInStderr) {
            return this.assert.fail(`Expected message "${message}" to be logged in "stdout" but it was logged in "stderr"`);
        }
        if (stream === 'stderr' && existsInStdout) {
            return this.assert.fail(`Expected message "${message}" to be logged in "stderr" but it was logged in "stdout"`);
        }
    }
    /**
     * Assert command to have not log the message.
     */
    assertNotLogged(message, stream) {
        const existsInStdout = this.output.stdout.includes(message);
        const existsInStderr = this.output.stderr.includes(message);
        switch (stream) {
            case 'stdout':
                this.assert.isFalse(existsInStdout);
                break;
            case 'stderr':
                this.assert.isFalse(existsInStderr);
                break;
            default:
                this.assert.isFalse(existsInStdout);
                this.assert.isFalse(existsInStderr);
        }
    }
    /**
     * Assert command to have a log that matches the regex.
     */
    assertLogMatches(regex, stream) {
        const existsInStdout = regex.test(this.output.stdout);
        const existsInStderr = regex.test(this.output.stderr);
        if (!existsInStdout && !existsInStderr) {
            return this.assert.fail(`Expected regex to match some message in "stdout" or "stderr" but none matched.`);
        }
        if (stream === 'stdout' && existsInStderr) {
            return this.assert.fail(`Expected message to be matched in ${inspect('stdout')} but it was found in ${inspect('stderr')}`);
        }
        if (stream === 'stderr' && existsInStdout) {
            return this.assert.fail(`Expected message to be matched in ${inspect('stderr')} but it was found in ${inspect('stdout')}`);
        }
    }
    /**
     * Assert command to not have a log that matches the regexp.
     */
    assertLogNotMatches(regex, stream) {
        const existsInStdout = regex.test(this.output.stdout);
        const existsInStderr = regex.test(this.output.stderr);
        switch (stream) {
            case 'stdout':
                this.assert.isFalse(existsInStdout);
                break;
            case 'stderr':
                this.assert.isFalse(existsInStderr);
                break;
            default:
                this.assert.isFalse(existsInStdout);
                this.assert.isFalse(existsInStderr);
        }
    }
}
