/**
 * @athenna/config
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
export declare class EnvHelper {
    /**
     * Replace environment values found inside other
     * environment values.
     *
     * Example: TEST_ENV=${MY_ENV}_Hello -> Env('TEST_ENV') -> env_Hello
     */
    static setEnvInEnv<T = any>(environment: any, autoCast: boolean): T;
    /**
     * Cast the environment variable if it values matches a
     * number string, boolean string, or json string.
     */
    static castEnv(environment: string): any;
    /**
     * Resolve the env file according to APP_ENV or NODE_ENV
     * environment variable.
     */
    static resolveFile(lookupNodeEnv?: boolean): void;
    /**
     * Resolve some env file path.
     */
    static resolveFilePath(path?: string, override?: boolean): void;
    /**
     * Verify if envs preset in process.env should be override
     * by envs that are set inside .env files.
     */
    static isToOverrideEnvs(): boolean;
    /**
     * Verify if the env variable is true, 'true' or '(true)'.
     */
    static isEnvTrue(env: string): boolean;
    /**
     * Get the APP_ENV or NODE_ENV variable from process.env or
     * from the .env file if exists in project root.
     */
    static getAppEnv(lookupNodeEnv: boolean): string;
    /**
     * Get the env value from .env file.
     */
    static getEnvFromString(envName: string, content: string): string;
    /**
     * Verify if some environment is defined ignoring.
     */
    static isDefinedEnv(environment: string): boolean;
}
