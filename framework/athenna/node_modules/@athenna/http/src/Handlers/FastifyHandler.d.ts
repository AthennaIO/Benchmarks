/**
 * @athenna/http
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { InterceptHandler, TerminateHandler } from '#src/Types/Middlewares/MiddlewareHandler';
import { RequestHandler } from '#src/Types/Contexts/Context';
import { ErrorHandler } from '#src/Types/Contexts/ErrorContext';
import { FastifyReply, FastifyRequest, RouteHandlerMethod } from 'fastify';
export declare class FastifyHandler {
    /**
     * Parse the fastify request handler and the preHandler hook to an Athenna
     * request handler.
     */
    static request(handler: RequestHandler): RouteHandlerMethod;
    /**
     * Just and alises for the request handler.
     */
    static handle(handler: RequestHandler): RouteHandlerMethod;
    /**
     * Parse the fastify onSend hook to an Athenna intercept handler.
     */
    static intercept(handler: InterceptHandler): (req: FastifyRequest, res: FastifyReply, payload: any) => Promise<any>;
    /**
     * Parse the fastify onResponse hook to an Athenna terminate handler.
     */
    static terminate(handler: TerminateHandler): (req: FastifyRequest, res: FastifyReply) => Promise<void>;
    /**
     * Parse the fastify onError hook to an Athenna error handler.
     */
    static error(handler: ErrorHandler): (error: any, req: FastifyRequest, res: FastifyReply) => Promise<void>;
}
