/**
 * @athenna/http
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { FastifyReply } from 'fastify';
import { FastifyHelmetOptions } from '@fastify/helmet';
export declare class Response {
    /**
     * The fastify response object.
     */
    response: FastifyReply;
    constructor(response: FastifyReply);
    /**
     * Verify if the response has been already sent.
     */
    get sent(): boolean;
    /**
     * Get the response body sent in response.
     */
    get body(): any | any[];
    /**
     * Get the status code sent in response.
     */
    get statusCode(): number;
    /**
     * Get the headers sent in response.
     */
    get headers(): any;
    /**
     * Get the time in MS of how much the request has taken to response.
     */
    get responseTime(): number;
    /**
     * Terminate the request sending the response body or not.
     */
    send(data?: any): Promise<Response>;
    /**
     * Set the response status code.
     */
    status(code: number): Response;
    /**
     * Add some header to the response.
     */
    header(header: string, value: any): Response;
    /**
     * Verify if response has some header.
     */
    hasHeader(header: string): boolean;
    /**
     * Add some header safelly to the response. This means that the header is not
     * going to be added if is already set.
     */
    safeHeader(header: string, value: any): Response;
    /**
     * Remove some header from the response.
     */
    removeHeader(header: string): Response;
    /**
     * Redirect the response to other url. You can also set a different status code
     * for the redirect.
     */
    redirectTo(url: string, status?: number): Promise<Response>;
    /**
     * Apply helmet in response.
     */
    helmet(options: FastifyHelmetOptions): Response;
}
