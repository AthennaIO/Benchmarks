/**
 * @athenna/http
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { Route } from '#src/Router/Route';
import { RouteResource } from '#src/Router/RouteResource';
import { MiddlewareRouteType } from '#src/Types/Middlewares/MiddlewareRouteType';
import { TerminatorRouteType } from '#src/Types/Middlewares/TerminatorRouteType';
import { InterceptorRouteType } from '#src/Types/Middlewares/InterceptorRouteType';
export declare class RouteGroup {
    /**
     * All routes registered in the group.
     */
    routes: (Route | RouteGroup | RouteResource)[];
    constructor(routes: (Route | RouteGroup | RouteResource)[]);
    /**
     * Define prefix all the routes in the group.
     *
     * @example
     * ```ts
     * Route.group(() => {
     *
     * }).prefix('/api/v1')
     * ```
     */
    prefix(prefix: string): RouteGroup;
    /**
     * Add a middleware to all routes in the group.
     *
     * @example
     * ```ts
     * Route.group(() => {
     *
     * }).middleware('auth')
     * ```
     */
    middleware(middleware: MiddlewareRouteType): RouteGroup;
    /**
     * Add an interceptor to all routes in the group.
     *
     * @example
     * ```ts
     * Route.group(() => {
     *
     * }).interceptor('response')
     * ```
     */
    interceptor(interceptor: InterceptorRouteType): RouteGroup;
    /**
     * Add a terminator to all routes in the group.
     *
     * @example
     * ```ts
     * Route.group(() => {
     *
     * }).terminator('log')
     * ```
     */
    terminator(terminator: TerminatorRouteType): RouteGroup;
    /**
     * Set up helmet options for route group.
     *
     * @example
     * ```ts
     * Route.group(() => {
     *
     * }).helmet({
     *  dnsPrefetchControl: { allow: true }
     * })
     * ```
     */
    helmet(options: Omit<import('@fastify/helmet').FastifyHelmetOptions, 'global'>): RouteGroup;
    /**
     * Set up rate limit options for route group method.
     *
     * @example
     * ```ts
     * Route.group(() => {
     *
     * }).rateLimit({
     *  max: 3,
     *  timeWindow: '1 minute'
     * })
     * ```
     */
    rateLimit(options: import('@fastify/rate-limit').RateLimitOptions): RouteGroup;
    /**
     * Invokes a given method with params on the route instance or route
     * resource instance.
     */
    private invoke;
}
