/**
 * @athenna/http
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { Route } from '#src/Router/Route';
import { RouteGroup } from '#src/Router/RouteGroup';
import { RouteJSON } from '#src/Types/Router/RouteJSON';
import { RouteResource } from '#src/Router/RouteResource';
import { RequestHandler } from '#src/Types/Contexts/Context';
import { RouteHandler } from '#src/Types/Router/RouteHandler';
import { HTTPMethods, FastifyInstance, RouteOptions } from 'fastify';
export declare class Router {
    /**
     * All routes registered.
     */
    routes: (Route | RouteGroup | RouteResource)[];
    /**
     * Route groups opened.
     */
    private openedGroups;
    /**
     * The controller instance.
     */
    private controllerInstance;
    /**
     * List the routes registered.
     */
    list(): RouteJSON[];
    /**
     * Set the controller instance.
     */
    controller(controller: any): this;
    /**
     * Add route for a given pattern and methods
     */
    route(pattern: string, methods: HTTPMethods[], handler: RouteHandler): Route;
    /**
     * Creates a vanilla fastify route without using Athenna router.
     */
    vanillaRoute(options?: RouteOptions): FastifyInstance;
    /**
     * Creates a new route resource.
     */
    resource(resource: string, controller?: any): RouteResource;
    /**
     * Define a route that handles all common HTTP methods.
     */
    any(pattern: string, handler: RequestHandler): Route;
    /**
     * Define GET route.
     */
    get(pattern: string, handler: RouteHandler): Route;
    /**
     * Define HEAD route.
     */
    head(pattern: string, handler: RouteHandler): Route;
    /**
     * Define POST route.
     */
    post(pattern: string, handler: RouteHandler): Route;
    /**
     * Define PUT route.
     */
    put(pattern: string, handler: RouteHandler): Route;
    /**
     * Define PATCH route.
     */
    patch(pattern: string, handler: RouteHandler): Route;
    /**
     * Define DELETE route.
     */
    delete(pattern: string, handler: RouteHandler): Route;
    /**
     * Define OPTIONS route.
     */
    options(pattern: string, handler: RouteHandler): Route;
    /**
     * Creates a group of routes. Anything applied in route groups will be applied
     * in the routes that are inside that group.
     */
    group(callback: () => void): RouteGroup;
    /**
     * Register all the routes inside the http server. After routes are registered,
     * anyone could be registered anymore.
     */
    register(): void;
    /**
     * Transform some route array to a route json array.
     */
    toJSON(routes: (Route | RouteGroup | RouteResource)[]): RouteJSON[];
    /**
     * Get the most recent route group created.
     */
    private getRecentGroup;
    /**
     * Indicates if if a valid controller handler method.
     */
    private isValidControllerHandler;
}
