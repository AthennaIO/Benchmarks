/**
 * @athenna/http
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import { Route } from '#src/router/Route';
import { RouteResource } from '#src/router/RouteResource';
export class RouteGroup {
    constructor(routes) {
        this.routes = routes;
    }
    /**
     * Define prefix all the routes in the group.
     *
     * @example
     * ```ts
     * Route.group(() => {
     *
     * }).prefix('/api/v1')
     * ```
     */
    prefix(prefix) {
        this.routes.forEach(route => this.invoke(route, 'prefix', [prefix]));
        return this;
    }
    /**
     * Add a middleware to all routes in the group.
     *
     * @example
     * ```ts
     * Route.group(() => {
     *
     * }).middleware('auth')
     * ```
     */
    middleware(middleware) {
        this.routes.forEach(route => this.invoke(route, 'middleware', [middleware, true]));
        return this;
    }
    /**
     * Add an interceptor to all routes in the group.
     *
     * @example
     * ```ts
     * Route.group(() => {
     *
     * }).interceptor('response')
     * ```
     */
    interceptor(interceptor) {
        this.routes.forEach(route => this.invoke(route, 'interceptor', [interceptor, true]));
        return this;
    }
    /**
     * Add a terminator to all routes in the group.
     *
     * @example
     * ```ts
     * Route.group(() => {
     *
     * }).terminator('log')
     * ```
     */
    terminator(terminator) {
        this.routes.forEach(route => this.invoke(route, 'terminator', [terminator, true]));
        return this;
    }
    /**
     * Set up helmet options for route group.
     *
     * @example
     * ```ts
     * Route.group(() => {
     *
     * }).helmet({
     *  dnsPrefetchControl: { allow: true }
     * })
     * ```
     */
    helmet(options) {
        this.routes.forEach(route => this.invoke(route, 'helmet', [options]));
        return this;
    }
    /**
     * Set up rate limit options for route group method.
     *
     * @example
     * ```ts
     * Route.group(() => {
     *
     * }).rateLimit({
     *  max: 3,
     *  timeWindow: '1 minute'
     * })
     * ```
     */
    rateLimit(options) {
        this.routes.forEach(route => this.invoke(route, 'rateLimit', [options]));
        return this;
    }
    /**
     * Invokes a given method with params on the route instance or route
     * resource instance.
     */
    invoke(route, method, params) {
        if (route instanceof RouteResource) {
            route.routes.forEach(child => this.invoke(child, method, params));
            return;
        }
        if (route instanceof RouteGroup) {
            route.routes.forEach(child => this.invoke(child, method, params));
            return;
        }
        route[method](...params);
    }
}
