/**
 * @athenna/http
 *
 * (c) Jo√£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
export class Response {
    constructor(response) {
        this.response = response;
    }
    /**
     * Verify if the response has been already sent.
     */
    get sent() {
        return this.response.sent;
    }
    /**
     * Get the response body sent in response.
     */
    get body() {
        return this.response.body;
    }
    /**
     * Get the status code sent in response.
     */
    get statusCode() {
        return this.response.statusCode;
    }
    /**
     * Get the headers sent in response.
     */
    get headers() {
        return this.response.getHeaders();
    }
    /**
     * Get the time in MS of how much the request has taken to response.
     */
    get responseTime() {
        return this.response.getResponseTime();
    }
    /**
     * Terminate the request sending the response body or not.
     */
    async send(data) {
        await this.response.send(data);
        this.response.body = data;
        return this;
    }
    /**
     * Set the response status code.
     */
    status(code) {
        this.response.status(code);
        return this;
    }
    /**
     * Add some header to the response.
     */
    header(header, value) {
        this.response.header(header, value);
        return this;
    }
    /**
     * Verify if response has some header.
     */
    hasHeader(header) {
        return this.response.hasHeader(header);
    }
    /**
     * Add some header safelly to the response. This means that the header is not
     * going to be added if is already set.
     */
    safeHeader(header, value) {
        this.response.header(header, value);
        return this;
    }
    /**
     * Remove some header from the response.
     */
    removeHeader(header) {
        this.response.removeHeader(header);
        return this;
    }
    /**
     * Redirect the response to other url. You can also set a different status code
     * for the redirect.
     */
    async redirectTo(url, status) {
        if (status) {
            await this.response.redirect(status, url);
            return this;
        }
        await this.response.redirect(url);
        return this;
    }
    /**
     * Apply helmet in response.
     */
    helmet(options) {
        this.response.helmet(options);
        return this;
    }
}
