"use strict";
/*
 * edge
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EdgeRenderer = void 0;
const utils_1 = require("@poppinss/utils");
const Template_1 = require("../Template");
/**
 * Renders a given template with it's shared state
 */
class EdgeRenderer {
    constructor(compiler, asyncCompiler, globals, processor) {
        this.compiler = compiler;
        this.asyncCompiler = asyncCompiler;
        this.globals = globals;
        this.processor = processor;
        this.locals = {};
    }
    /**
     * Share local variables with the template. They will overwrite the
     * globals
     */
    share(data) {
        utils_1.lodash.merge(this.locals, data);
        return this;
    }
    /**
     * Render the template
     */
    async render(templatePath, state = {}) {
        return new Template_1.Template(this.asyncCompiler, this.globals, this.locals, this.processor).render(templatePath, state);
    }
    /**
     * Render the template
     */
    renderSync(templatePath, state = {}) {
        return new Template_1.Template(this.compiler, this.globals, this.locals, this.processor).render(templatePath, state);
    }
    /**
     * Render the template from a raw string
     */
    async renderRaw(contents, state = {}, templatePath) {
        return new Template_1.Template(this.asyncCompiler, this.globals, this.locals, this.processor).renderRaw(contents, state, templatePath);
    }
    /**
     * Render the template from a raw string
     */
    renderRawSync(contents, state = {}, templatePath) {
        return new Template_1.Template(this.compiler, this.globals, this.locals, this.processor).renderRaw(contents, state, templatePath);
    }
}
exports.EdgeRenderer = EdgeRenderer;
