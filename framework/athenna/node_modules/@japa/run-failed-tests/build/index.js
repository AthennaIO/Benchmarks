"use strict";
/*
 * @japa/run-failed-tests
 *
 * (c) Japa.dev
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runFailedTests = void 0;
const path_1 = require("path");
const find_cache_dir_1 = __importDefault(require("find-cache-dir"));
const cliui_1 = require("@poppinss/cliui");
const fs_extra_1 = require("fs-extra");
/**
 * Returns the summary from the summary file
 */
async function getSummary(summaryFilePath) {
    try {
        return await (0, fs_extra_1.readJson)(summaryFilePath);
    }
    catch (error) {
        if (error.code === 'ENOENT') {
            return {};
        }
        throw new Error(`"@japa/run-failed-tests": ${error.message}`);
    }
}
/**
 * Perists summary with failing tests to the disk
 */
async function writeSummary(summaryFilePath, contents) {
    await (0, fs_extra_1.outputJson)(summaryFilePath, contents);
}
/**
 * Plugin function to run failed tests only. Only for "@japa/runner"
 */
function runFailedTests(options) {
    options = Object.assign({}, options);
    return async function (config) {
        /**
         * Do not overwrite existing filters
         */
        if (config.filters.tests?.length) {
            return;
        }
        /**
         * Use the default path when no explicit path is provided
         */
        if (!options.summaryFilePath) {
            options.summaryFilePath = (0, path_1.join)((0, find_cache_dir_1.default)({ name: '@japa/run-failed-tests' }, 'summary.json'));
        }
        /**
         * Get summary and look for failed tests
         */
        const summary = await getSummary(options.summaryFilePath);
        /**
         * Apply the filter when there are one or more failed tests
         */
        if (summary.tests?.length) {
            config.filters.tests = summary.tests;
            (0, cliui_1.sticker)()
                .heading('"@japa/run-failed-tests"')
                .add('')
                .add(`${summary.tests.length} failed test(s) found`)
                .add('Applying filter to run only failed tests')
                .render();
            /**
             * Empty out files filter when "ignoreFilesFilter" is set to true
             */
            if (options.ignoreFilesFilter) {
                config.filters.files = [];
            }
        }
        /**
         * Persist file during teardown
         */
        config.teardown.push(async (runner) => {
            await writeSummary(options.summaryFilePath, {
                tests: runner.getSummary().failedTestsTitles,
            });
        });
    };
}
exports.runFailedTests = runFailedTests;
