"use strict";
/*
 * @japa/runner
 *
 * (c) Japa.dev
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Runner = exports.Suite = exports.Group = exports.Test = exports.TestContext = void 0;
const core_1 = require("@japa/core");
const debug_1 = __importDefault(require("../debug"));
/**
 * Runner specific test context. Here we extend the test context to register
 * cleanup methods with the test and register hooks to get notified when
 * a new instance of test context is created.
 */
class TestContext extends core_1.TestContext {
    /**
     * Register a function to get notified when an instance of test
     * context is created. The callback must be synchronous
     */
    static created(callback) {
        (0, debug_1.default)('registering test context created hook "%s"', callback);
        this.createdCallbacks.push(callback);
        return this;
    }
    constructor(test) {
        super();
        this.test = test;
        this.cleanup = (handler) => {
            test.cleanup(handler);
        };
        /**
         * Invoke ready callbacks
         */
        const Constructor = this.constructor;
        Constructor.createdCallbacks.forEach((callback) => callback(this));
    }
}
exports.TestContext = TestContext;
/**
 * Methods to call after the test context instance
 * is created
 */
TestContext.createdCallbacks = [];
/**
 * Runner specific Test with a fixed TestContext static type.
 */
class Test extends core_1.Test {
}
exports.Test = Test;
Test.disposeCallbacks = [];
/**
 * Runner specific Group with a fixed TestContext static type.
 */
class Group extends core_1.Group {
}
exports.Group = Group;
/**
 * Runner specific Suite with a fixed TestContext static type.
 */
class Suite extends core_1.Suite {
    onGroup(callback) {
        super.onGroup(callback);
        return this;
    }
    onTest(callback) {
        super.onTest(callback);
        return this;
    }
}
exports.Suite = Suite;
/**
 * Runner specific tests Runner with a fixed TestContext static type.
 */
class Runner extends core_1.Runner {
    onSuite(callback) {
        super.onSuite(callback);
        return this;
    }
}
exports.Runner = Runner;
