"use strict";
/*
 * @japa/errors-printer
 *
 * (c) Japa.dev
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorsPrinter = void 0;
const os_1 = require("os");
const youch_1 = __importDefault(require("youch"));
const youch_terminal_1 = __importDefault(require("youch-terminal"));
const jest_diff_1 = require("jest-diff");
const cliui_1 = require("@poppinss/cliui");
/**
 * Print test runner errors
 */
class ErrorsPrinter {
    constructor(options) {
        this.stackLinesCount = options?.stackLinesCount || 5;
        this.framesMaxLimit = options?.framesMaxLimit || 3;
    }
    /**
     * Get Youch's JSON report of the given error
     */
    async getYouchJson(error) {
        const youch = new youch_1.default(error, {}, {
            postLines: this.stackLinesCount,
            preLines: this.stackLinesCount,
        });
        return youch.toJSON();
    }
    /**
     * Returns human readable message for error phase
     */
    getPhaseTitle(phase) {
        switch (phase) {
            case 'setup':
                return 'Setup hook';
            case 'setup:cleanup':
                return 'Setup hook cleanup function';
            case 'teardown':
                return 'Teardown hook';
            case 'teardown:cleanup':
                return 'Teardown hook cleanup function';
        }
    }
    /**
     * Displays the error stack for a given error
     */
    async displayErrorStack(error) {
        const jsonResponse = await this.getYouchJson(error);
        console.log((0, youch_terminal_1.default)(jsonResponse, {
            displayShortPath: true,
            framesMaxLimit: this.framesMaxLimit,
            displayMainFrameOnly: false,
        }));
    }
    /**
     * Display chai assertion error
     */
    async displayAssertionError(error) {
        /**
         * Display diff
         */
        console.log();
        console.log(`  Assertion Error: ${error.message}`);
        console.log();
        if (error.showDiff) {
            const { actual, expected } = error;
            const diff = (0, jest_diff_1.diff)(expected, actual, {
                expand: true,
                includeChangeCounts: true,
            });
            console.log(diff);
        }
        /**
         * Display error stack with the main frame only
         */
        const jsonResponse = await this.getYouchJson(error);
        console.log((0, youch_terminal_1.default)(jsonResponse, {
            hideErrorTitle: true,
            hideMessage: true,
            displayShortPath: true,
            displayMainFrameOnly: true,
        }));
    }
    /**
     * Display jest assertion error
     */
    async displayJestError(error) {
        /**
         * Display diff
         */
        console.log();
        console.log(`  Assertion Error:${error.message
            .split(os_1.EOL)
            .map((line) => `  ${line}`)
            .join(os_1.EOL)}`);
        console.log();
        /**
         * Display error stack with the main frame only
         */
        const jsonResponse = await this.getYouchJson(error);
        console.log((0, youch_terminal_1.default)(jsonResponse, {
            hideErrorTitle: true,
            hideMessage: true,
            displayShortPath: true,
            displayMainFrameOnly: true,
        }));
    }
    /**
     * Pretty print the error to the console
     */
    async printError(error) {
        /**
         * Values are not object objects are printed as it is.
         */
        if (error === null || Array.isArray(error) || typeof error !== 'object') {
            console.log(`Error: ${error}`);
            return;
        }
        if ('actual' in error && 'expected' in error) {
            await this.displayAssertionError(error);
            return;
        }
        if ('matcherResult' in error) {
            await this.displayJestError(error);
            return;
        }
        await this.displayErrorStack(error);
    }
    /**
     * Print summary errors
     */
    async printErrors(label, errors) {
        for (let { phase, error } of errors) {
            console.log(cliui_1.logger.colors.red(`${cliui_1.icons.cross} ${label}`));
            if (phase !== 'test') {
                console.log(`  ${cliui_1.logger.colors.red(`(${this.getPhaseTitle(phase)})`)}`);
            }
            await this.printError(error);
            console.log();
        }
    }
}
exports.ErrorsPrinter = ErrorsPrinter;
