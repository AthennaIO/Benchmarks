"use strict";
/*
 * @japa/core
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Group = void 0;
const macroable_1 = require("macroable");
const hooks_1 = require("@poppinss/hooks");
const debug_1 = __importDefault(require("../debug"));
const runner_1 = require("./runner");
/**
 * Group class exposes an API to group multiple tests together
 * and bulk configure them.
 *
 * NOTE: Nested groups are not supported on purpose.
 *
 * @example
 * const group = new Group('addition', emitter, refiner)
 * const test = new Test('2 + 2 = 4', emitter, refiner)
 *
 * group.add(test)
 * await group.exec()
 */
class Group extends macroable_1.Macroable {
    constructor(title, emitter, refiner) {
        super();
        this.title = title;
        this.emitter = emitter;
        this.refiner = refiner;
        /**
         * Reference to registered hooks
         */
        this.hooks = new hooks_1.Hooks();
        /**
         * Callbacks to invoke on each test
         */
        this.tapsCallbacks = [];
        this.testSetupHooks = [];
        this.testTeardownHooks = [];
        this.options = {
            title: this.title,
            meta: {},
        };
        /**
         * An array of tests registered under the given group
         */
        this.tests = [];
        /**
         * Shortcut methods to configure tests
         */
        this.each = {
            /**
             * Define setup hook for all tests inside the group
             */
            setup: (handler) => {
                this.testSetupHooks.push(handler);
            },
            /**
             * Define teardown hook for all tests inside the group
             */
            teardown: (handler) => {
                this.testTeardownHooks.push(handler);
            },
            /**
             * Define timeout for all tests inside the group
             */
            timeout: (timeout) => {
                this.testsTimeout = timeout;
            },
            /**
             * Disable timeout for all tests inside the group
             */
            disableTimeout: () => {
                this.testsTimeout = 0;
            },
            /**
             * Define retries for all tests inside the group
             */
            retry: (retries) => {
                this.testsRetries = retries;
            },
        };
    }
    /**
     * Add a test to the group. Adding a test to the group
     * mutates the test properties
     */
    add(test) {
        (0, debug_1.default)('adding "%s" test to "%s" group', test.title, this.title);
        /**
         * Bulk configure
         */
        if (this.testsTimeout !== undefined) {
            test.timeout(this.testsTimeout);
        }
        if (this.testsRetries !== undefined) {
            test.retry(this.testsRetries);
        }
        if (this.testSetupHooks.length) {
            this.testSetupHooks.forEach((handler) => test.setup(handler));
        }
        if (this.testTeardownHooks.length) {
            this.testTeardownHooks.forEach((handler) => test.teardown(handler));
        }
        /**
         * Invoke tap callback passing test to each callback
         */
        this.tapsCallbacks.forEach((callback) => callback(test));
        this.tests.push(test);
        return this;
    }
    /**
     * Tap into each test and configure it
     */
    tap(callback) {
        this.tapsCallbacks.push(callback);
        return this;
    }
    /**
     * Define setup hook for the group
     */
    setup(handler) {
        (0, debug_1.default)('registering "%s" group setup hook %s', this.title, handler);
        this.hooks.add('setup', handler);
        return this;
    }
    /**
     * Define teardown hook for the group
     */
    teardown(handler) {
        (0, debug_1.default)('registering "%s" group teardown hook %s', this.title, handler);
        this.hooks.add('teardown', handler);
        return this;
    }
    /**
     * Execute group hooks and tests
     */
    async exec() {
        if (!this.refiner.allows(this)) {
            (0, debug_1.default)('group skipped by refined %s', this.title);
            return;
        }
        await new runner_1.GroupRunner(this, this.hooks, this.emitter).run();
    }
}
exports.Group = Group;
Group.macros = {};
Group.getters = {};
