import { b as builders } from './shared/magicast.25fe5da1.mjs';
import 'recast';
import 'node:fs';
import '@babel/parser';

function deepMergeObject(magicast, object) {
  if (typeof object === "object") {
    for (const key in object) {
      if (typeof object[key] === "object") {
        deepMergeObject(magicast[key], object[key]);
      } else {
        magicast[key] = object[key];
      }
    }
  }
}

function getDefaultExportOptions(magicast) {
  return magicast.exports.default.$type === "function-call" ? magicast.exports.default.$args[0] : magicast.exports.default;
}

function addNuxtModule(magicast, name, optionsKey, options) {
  const config = getDefaultExportOptions(magicast);
  config.modules || (config.modules = []);
  if (!config.modules.includes(name)) {
    config.modules.push(name);
  }
  if (optionsKey) {
    config[optionsKey] || (config[optionsKey] = {});
    deepMergeObject(config[optionsKey], options);
  }
}

function addVitePlugin(magicast, plugin) {
  const config = getDefaultExportOptions(magicast);
  config.plugins || (config.plugins = []);
  config.plugins.push(
    plugin.options ? builders.functionCall(plugin.constructor, plugin.options) : builders.functionCall(plugin.constructor)
  );
  magicast.imports.$add({
    from: plugin.from,
    local: plugin.constructor,
    imported: plugin.imported || "default"
  });
  return true;
}
function findVitePluginCall(magicast, plugin) {
  const _plugin = typeof plugin === "string" ? { from: plugin, imported: "default" } : plugin;
  const config = getDefaultExportOptions(magicast);
  const constructor = magicast.imports.$items.find(
    (i) => i.from === _plugin.from && i.imported === (_plugin.imported || "default")
  )?.local;
  return config.plugins?.find(
    (p) => p && p.$type === "function-call" && p.$callee === constructor
  );
}
function updateVitePluginConfig(magicast, plugin, handler) {
  const item = findVitePluginCall(magicast, plugin);
  if (!item) {
    return false;
  }
  if (typeof handler === "function") {
    item.$args = handler(item.$args);
  } else if (item.$args[0]) {
    deepMergeObject(item.$args[0], handler);
  } else {
    item.$args[0] = handler;
  }
  return true;
}

export { addNuxtModule, addVitePlugin, deepMergeObject, findVitePluginCall, getDefaultExportOptions, updateVitePluginConfig };
