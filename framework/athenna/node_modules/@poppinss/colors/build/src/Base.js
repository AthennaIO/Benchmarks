"use strict";
/**
 * @poppinss/colors
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Colors = void 0;
/**
 * Base class extended by [[Kleur]] and [[Stringify]] classes to have
 * common interface. The API is kept similar to `kleur` package.
 */
class Colors {
    black(text) {
        return this.transform('black', text);
    }
    red(text) {
        return this.transform('red', text);
    }
    green(text) {
        return this.transform('green', text);
    }
    yellow(text) {
        return this.transform('yellow', text);
    }
    blue(text) {
        return this.transform('blue', text);
    }
    magenta(text) {
        return this.transform('magenta', text);
    }
    cyan(text) {
        return this.transform('cyan', text);
    }
    white(text) {
        return this.transform('white', text);
    }
    gray(text) {
        return this.transform('gray', text);
    }
    grey(text) {
        return this.transform('grey', text);
    }
    bgBlack(text) {
        return this.transform('bgBlack', text);
    }
    bgRed(text) {
        return this.transform('bgRed', text);
    }
    bgGreen(text) {
        return this.transform('bgGreen', text);
    }
    bgYellow(text) {
        return this.transform('bgYellow', text);
    }
    bgBlue(text) {
        return this.transform('bgBlue', text);
    }
    bgMagenta(text) {
        return this.transform('bgMagenta', text);
    }
    bgCyan(text) {
        return this.transform('bgCyan', text);
    }
    bgWhite(text) {
        return this.transform('bgWhite', text);
    }
    reset(text) {
        return this.transform('reset', text);
    }
    bold(text) {
        return this.transform('bold', text);
    }
    dim(text) {
        return this.transform('dim', text);
    }
    italic(text) {
        return this.transform('italic', text);
    }
    underline(text) {
        return this.transform('underline', text);
    }
    inverse(text) {
        return this.transform('inverse', text);
    }
    hidden(text) {
        return this.transform('hidden', text);
    }
    strikethrough(text) {
        return this.transform('strikethrough', text);
    }
}
exports.Colors = Colors;
