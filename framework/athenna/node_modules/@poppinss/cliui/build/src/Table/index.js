"use strict";
/*
 * @poppinss/cliui
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = void 0;
const cli_table3_1 = __importDefault(require("cli-table3"));
const Colors_1 = require("../Colors");
const Console_1 = require("../Renderer/Console");
/**
 * Default config options
 */
const DEFAULTS = {
    colors: true,
};
/**
 * Exposes the API to represent a table
 */
class Table {
    constructor(options, testing = false) {
        this.testing = testing;
        this.state = {
            head: [],
            rows: [],
        };
        this.options = { ...DEFAULTS, ...options };
        this.colors = (0, Colors_1.getBest)(this.testing, this.options.colors);
    }
    /**
     * Returns the renderer for rendering the messages
     */
    getRenderer() {
        if (!this.renderer) {
            this.renderer = new Console_1.ConsoleRenderer();
        }
        return this.renderer;
    }
    /**
     * Define a custom renderer. Logs to "stdout" and "stderr"
     * by default
     */
    useRenderer(renderer) {
        this.renderer = renderer;
        return this;
    }
    /**
     * Define table head
     */
    head(headColumns) {
        this.state.head = headColumns.map((col) => this.colors.cyan(col));
        return this;
    }
    /**
     * Add a new table row
     */
    row(row) {
        this.state.rows.push(row);
        return this;
    }
    /**
     * Define custom column widths
     */
    columnWidths(widths) {
        this.state.colWidths = widths;
        return this;
    }
    /**
     * Render table
     */
    render() {
        if (this.testing) {
            this.getRenderer().log(this.state.head.join('|'));
            this.state.rows.forEach((row) => {
                const content = Array.isArray(row)
                    ? row.map((cell) => {
                        if (typeof cell === 'string') {
                            return cell;
                        }
                        return cell.content;
                    })
                    : Object.keys(row);
                this.getRenderer().log(content.join('|'));
            });
            return;
        }
        const cliTable = new cli_table3_1.default({
            head: this.state.head,
            style: { head: [], border: ['dim'] },
            ...(this.state.colWidths ? { colWidths: this.state.colWidths } : {}),
        });
        this.state.rows.forEach((row) => cliTable.push(row));
        this.getRenderer().log(cliTable.toString());
    }
}
exports.Table = Table;
