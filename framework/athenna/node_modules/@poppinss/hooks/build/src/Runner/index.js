"use strict";
/*
 * @poppinss/hooks
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Runner = void 0;
/**
 * Runner to execute hooks and cleanup actions
 */
class Runner {
    constructor(hooksHandlers, withoutHooks) {
        this.hooksHandlers = hooksHandlers;
        this.withoutHooks = withoutHooks;
        this.cleanupActions = [];
        /**
         * Find if cleanup call is pending or not. The cleanup is only
         * pending when the run method has been called
         */
        this.isCleanupPending = false;
    }
    shouldRunHandler(handler) {
        return this.withoutHooks ? !this.withoutHooks.includes(handler.name) : true;
    }
    /**
     * Run hooks
     */
    async run(...data) {
        if (!this.hooksHandlers) {
            return;
        }
        this.isCleanupPending = true;
        for (let handler of this.hooksHandlers) {
            if (this.shouldRunHandler(handler)) {
                const cleanupAction = await handler(...data);
                typeof cleanupAction === 'function' && this.cleanupActions.push(cleanupAction);
            }
        }
    }
    /**
     * Execute cleanup actions
     */
    async cleanup(...data) {
        this.isCleanupPending = false;
        let startIndex = this.cleanupActions.length;
        while (startIndex--) {
            await this.cleanupActions[startIndex](...data);
        }
    }
}
exports.Runner = Runner;
