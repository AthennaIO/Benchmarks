"use strict";
/*
 * @poppinss/hooks
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hooks = void 0;
const Runner_1 = require("../Runner");
/**
 * Exposes the API for registering hooks for a given lifecycle action.
 *
 * @example
 * const hooks = new Hooks()
 * hooks.add('onCreate', function () {
 *  doSomething
 * })
 */
class Hooks {
    constructor() {
        /**
         * Pre-resolved registered hooks
         */
        this.hooks = new Map();
    }
    /**
     * Add handler to the actions map
     */
    addHandler(action, handler) {
        const handlers = this.hooks.get(action);
        if (!handlers) {
            this.hooks.set(action, new Set());
        }
        this.hooks.get(action).add(handler);
    }
    /**
     * Returns a map of registered hooks
     */
    all() {
        return this.hooks;
    }
    /**
     * Returns true when a handler has already been registered
     */
    has(action, handler) {
        const handlers = this.hooks.get(action);
        if (!handlers) {
            return false;
        }
        return handlers.has(handler);
    }
    /**
     * Register handler for a given action
     */
    add(action, handler) {
        this.addHandler(action, handler);
        return this;
    }
    /**
     * Remove a pre-registered handler
     */
    remove(action, handler) {
        const handlers = this.hooks.get(action);
        if (!handlers) {
            return;
        }
        handlers.delete(handler);
    }
    /**
     * Remove all handlers for a given action. If action is not
     * defined, then all actions are removed.
     */
    clear(action) {
        if (!action) {
            this.hooks.clear();
            return;
        }
        this.hooks.delete(action);
    }
    /**
     * Merge pre-resolved hooks from an existing
     * hooks instance
     */
    merge(hooks) {
        hooks.all().forEach((actionHooks, action) => {
            actionHooks.forEach((handler) => {
                this.add(action, handler);
            });
        });
    }
    /**
     * Returns an instance of hooks runner. Optionally, a few hooks can be disabled.
     */
    runner(action, withoutHooks) {
        return new Runner_1.Runner(this.hooks.get(action), withoutHooks);
    }
}
exports.Hooks = Hooks;
