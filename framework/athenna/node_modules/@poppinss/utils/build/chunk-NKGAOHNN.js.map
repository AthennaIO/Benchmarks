{"version":3,"sources":["../src/base64.ts","../src/string/milliseconds.ts"],"sourcesContent":["/*\n * @poppinss/utils\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * Helper class to base64 encode/decode values with option\n * for url encoding and decoding\n */\nclass Base64 {\n  /**\n   * Base64 encode Buffer or string\n   */\n  encode(arrayBuffer: ArrayBuffer | SharedArrayBuffer): string\n  encode(data: string, encoding?: BufferEncoding): string\n  encode(data: ArrayBuffer | SharedArrayBuffer | string, encoding?: BufferEncoding): string {\n    if (typeof data === 'string') {\n      return Buffer.from(data, encoding).toString('base64')\n    }\n    return Buffer.from(data).toString('base64')\n  }\n\n  /**\n   * Base64 decode a previously encoded string or Buffer.\n   */\n  decode(encode: string, encoding: BufferEncoding, strict: true): string\n  decode(encode: string, encoding: undefined, strict: true): string\n  decode(encode: string, encoding?: BufferEncoding, strict?: false): string | null\n  decode(encode: Buffer, encoding?: BufferEncoding): string\n  decode(\n    encoded: string | Buffer,\n    encoding: BufferEncoding = 'utf-8',\n    strict: boolean = false\n  ): string | null {\n    if (Buffer.isBuffer(encoded)) {\n      return encoded.toString(encoding)\n    }\n\n    const decoded = Buffer.from(encoded, 'base64').toString(encoding)\n    const isInvalid = this.encode(decoded, encoding) !== encoded\n\n    if (strict && isInvalid) {\n      throw new Error('Cannot decode malformed value')\n    }\n\n    return isInvalid ? null : decoded\n  }\n\n  /**\n   * Base64 encode Buffer or string to be URL safe. (RFC 4648)\n   */\n  urlEncode(arrayBuffer: ArrayBuffer | SharedArrayBuffer): string\n  urlEncode(data: string, encoding?: BufferEncoding): string\n  urlEncode(data: ArrayBuffer | SharedArrayBuffer | string, encoding?: BufferEncoding): string {\n    const encoded = typeof data === 'string' ? this.encode(data, encoding) : this.encode(data)\n    return encoded.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/\\=/g, '')\n  }\n\n  /**\n   * Base64 URL decode a previously encoded string or Buffer. (RFC 4648)\n   */\n  urlDecode(encode: string, encoding: BufferEncoding, strict: true): string\n  urlDecode(encode: string, encoding: undefined, strict: true): string\n  urlDecode(encode: string, encoding?: BufferEncoding, strict?: false): string | null\n  urlDecode(encode: Buffer, encoding?: BufferEncoding): string\n  urlDecode(\n    encoded: string | Buffer,\n    encoding: BufferEncoding = 'utf-8',\n    strict: boolean = false\n  ): string | null {\n    if (Buffer.isBuffer(encoded)) {\n      return encoded.toString(encoding)\n    }\n\n    const decoded = Buffer.from(encoded, 'base64').toString(encoding)\n    const isInvalid = this.urlEncode(decoded, encoding) !== encoded\n\n    if (strict && isInvalid) {\n      throw new Error('Cannot urlDecode malformed value')\n    }\n\n    return isInvalid ? null : decoded\n  }\n}\n\nexport const base64 = new Base64()\n","/*\n * @poppinss/utils\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { parse, format } from '@lukeed/ms'\n\nexport default {\n  format(milliseconds: number, long?: boolean): string {\n    return format(milliseconds, long)\n  },\n\n  /**\n   * Parse time expression string to milliseconds. The number value\n   * is returned as it is, considering it is already in milliseconds\n   */\n  parse(duration: string | number): number {\n    if (typeof duration === 'number') {\n      return duration\n    }\n\n    const milliseconds = parse(duration)\n    if (milliseconds === undefined) {\n      throw new Error(`Invalid duration expression \"${duration}\"`)\n    }\n\n    return milliseconds\n  },\n}\n"],"mappings":";AAaA,IAAM,SAAN,MAAa;AAAA,EAMX,OAAO,MAAgD,UAAmC;AACxF,QAAI,OAAO,SAAS,UAAU;AAC5B,aAAO,OAAO,KAAK,MAAM,QAAQ,EAAE,SAAS,QAAQ;AAAA,IACtD;AACA,WAAO,OAAO,KAAK,IAAI,EAAE,SAAS,QAAQ;AAAA,EAC5C;AAAA,EASA,OACE,SACA,WAA2B,SAC3B,SAAkB,OACH;AACf,QAAI,OAAO,SAAS,OAAO,GAAG;AAC5B,aAAO,QAAQ,SAAS,QAAQ;AAAA,IAClC;AAEA,UAAM,UAAU,OAAO,KAAK,SAAS,QAAQ,EAAE,SAAS,QAAQ;AAChE,UAAM,YAAY,KAAK,OAAO,SAAS,QAAQ,MAAM;AAErD,QAAI,UAAU,WAAW;AACvB,YAAM,IAAI,MAAM,+BAA+B;AAAA,IACjD;AAEA,WAAO,YAAY,OAAO;AAAA,EAC5B;AAAA,EAOA,UAAU,MAAgD,UAAmC;AAC3F,UAAM,UAAU,OAAO,SAAS,WAAW,KAAK,OAAO,MAAM,QAAQ,IAAI,KAAK,OAAO,IAAI;AACzF,WAAO,QAAQ,QAAQ,OAAO,GAAG,EAAE,QAAQ,OAAO,GAAG,EAAE,QAAQ,OAAO,EAAE;AAAA,EAC1E;AAAA,EASA,UACE,SACA,WAA2B,SAC3B,SAAkB,OACH;AACf,QAAI,OAAO,SAAS,OAAO,GAAG;AAC5B,aAAO,QAAQ,SAAS,QAAQ;AAAA,IAClC;AAEA,UAAM,UAAU,OAAO,KAAK,SAAS,QAAQ,EAAE,SAAS,QAAQ;AAChE,UAAM,YAAY,KAAK,UAAU,SAAS,QAAQ,MAAM;AAExD,QAAI,UAAU,WAAW;AACvB,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACpD;AAEA,WAAO,YAAY,OAAO;AAAA,EAC5B;AACF;AAEO,IAAM,SAAS,IAAI,OAAO;;;AChFjC,SAAS,OAAO,cAAc;AAE9B,IAAO,uBAAQ;AAAA,EACb,OAAO,cAAsB,MAAwB;AACnD,WAAO,OAAO,cAAc,IAAI;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,UAAmC;AACvC,QAAI,OAAO,aAAa,UAAU;AAChC,aAAO;AAAA,IACT;AAEA,UAAM,eAAe,MAAM,QAAQ;AACnC,QAAI,iBAAiB,QAAW;AAC9B,YAAM,IAAI,MAAM,gCAAgC,QAAQ,GAAG;AAAA,IAC7D;AAEA,WAAO;AAAA,EACT;AACF;","names":[]}