{"version":3,"sources":["../../src/string_builder.ts"],"sourcesContent":["/*\n * @poppinss/utils\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { extname } from 'node:path'\nimport string from './string/main.js'\n\n/**\n * String builder to transform the string using the fluent API\n */\nexport default class StringBuilder {\n  #value: string\n\n  constructor(value: string | StringBuilder) {\n    this.#value = typeof value === 'string' ? value : value.toString()\n  }\n\n  /**\n   * Applies dash case transformation\n   */\n  dashCase(): this {\n    this.#value = string.dashCase(this.#value)\n    return this\n  }\n\n  /**\n   * Applies dot case transformation\n   */\n  dotCase(): this {\n    this.#value = string.dotCase(this.#value)\n    return this\n  }\n\n  /**\n   * Applies snake case transformation\n   */\n  snakeCase(): this {\n    this.#value = string.snakeCase(this.#value)\n    return this\n  }\n\n  /**\n   * Applies pascal case transformation\n   */\n  pascalCase(): this {\n    this.#value = string.pascalCase(this.#value)\n    return this\n  }\n\n  /**\n   * Applies camelcase case transformation\n   */\n  camelCase(): this {\n    this.#value = string.camelCase(this.#value)\n    return this\n  }\n\n  /**\n   * Applies capital case transformation\n   */\n  capitalCase(): this {\n    this.#value = string.capitalCase(this.#value)\n    return this\n  }\n\n  /**\n   * Applies title case transformation\n   */\n  titleCase(): this {\n    this.#value = string.titleCase(this.#value)\n    return this\n  }\n\n  /**\n   * Applies sentence case transformation\n   */\n  sentenceCase(): this {\n    this.#value = string.sentenceCase(this.#value)\n    return this\n  }\n\n  /**\n   * Removes all sorts of casing from the string\n   */\n  noCase(): this {\n    this.#value = string.noCase(this.#value)\n    return this\n  }\n\n  /**\n   * Converts value to its plural form\n   */\n  plural(): this {\n    this.#value = string.pluralize(this.#value)\n    return this\n  }\n\n  /**\n   * Converts value to its singular form\n   */\n  singular(): this {\n    this.#value = string.singular(this.#value)\n    return this\n  }\n\n  /**\n   * Converts value to a URL friendly slug\n   */\n  slugify(): this {\n    this.#value = string.slug(this.#value)\n    return this\n  }\n\n  /**\n   * Removes a given suffix from the string\n   */\n  removeSuffix(suffix: string): this {\n    this.#value = this.#value.replace(new RegExp(`[-_]?${suffix}$`, 'i'), '')\n    return this\n  }\n\n  /**\n   * Adds suffix to the string\n   */\n  suffix(suffix: string): this {\n    this.removeSuffix(suffix)\n    this.#value = `${this.#value}${suffix}`\n    return this\n  }\n\n  /**\n   * Removes a given prefix from the string\n   */\n  removePrefix(prefix: string): this {\n    this.#value = this.#value.replace(new RegExp(`^${prefix}[-_]?`, 'i'), '')\n    return this\n  }\n\n  /**\n   * Adds prefix to the string\n   */\n  prefix(prefix: string): this {\n    this.removePrefix(prefix)\n    this.#value = `${prefix}${this.#value}`\n    return this\n  }\n\n  /**\n   * Removes extension from the value\n   */\n  removeExtension(): this {\n    this.#value = this.#value.replace(new RegExp(`${extname(this.#value)}$`), '')\n    return this\n  }\n\n  /**\n   * Adds extension to the value\n   */\n  ext(extension: string): this {\n    this.removeExtension()\n    this.#value = `${this.#value}.${extension.replace(/^\\./, '')}`\n    return this\n  }\n\n  toString() {\n    return this.#value\n  }\n}\n"],"mappings":";;;;;;AASA,SAAS,eAAe;AAMxB,IAAqB,gBAArB,MAAmC;AAAA,EACjC;AAAA,EAEA,YAAY,OAA+B;AACzC,SAAK,SAAS,OAAO,UAAU,WAAW,QAAQ,MAAM,SAAS;AAAA,EACnE;AAAA;AAAA;AAAA;AAAA,EAKA,WAAiB;AACf,SAAK,SAAS,aAAO,SAAS,KAAK,MAAM;AACzC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,UAAgB;AACd,SAAK,SAAS,aAAO,QAAQ,KAAK,MAAM;AACxC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,YAAkB;AAChB,SAAK,SAAS,aAAO,UAAU,KAAK,MAAM;AAC1C,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,aAAmB;AACjB,SAAK,SAAS,aAAO,WAAW,KAAK,MAAM;AAC3C,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,YAAkB;AAChB,SAAK,SAAS,aAAO,UAAU,KAAK,MAAM;AAC1C,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,cAAoB;AAClB,SAAK,SAAS,aAAO,YAAY,KAAK,MAAM;AAC5C,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,YAAkB;AAChB,SAAK,SAAS,aAAO,UAAU,KAAK,MAAM;AAC1C,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,eAAqB;AACnB,SAAK,SAAS,aAAO,aAAa,KAAK,MAAM;AAC7C,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,SAAe;AACb,SAAK,SAAS,aAAO,OAAO,KAAK,MAAM;AACvC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,SAAe;AACb,SAAK,SAAS,aAAO,UAAU,KAAK,MAAM;AAC1C,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,WAAiB;AACf,SAAK,SAAS,aAAO,SAAS,KAAK,MAAM;AACzC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,UAAgB;AACd,SAAK,SAAS,aAAO,KAAK,KAAK,MAAM;AACrC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,QAAsB;AACjC,SAAK,SAAS,KAAK,OAAO,QAAQ,IAAI,OAAO,QAAQ,MAAM,KAAK,GAAG,GAAG,EAAE;AACxE,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,QAAsB;AAC3B,SAAK,aAAa,MAAM;AACxB,SAAK,SAAS,GAAG,KAAK,MAAM,GAAG,MAAM;AACrC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,QAAsB;AACjC,SAAK,SAAS,KAAK,OAAO,QAAQ,IAAI,OAAO,IAAI,MAAM,SAAS,GAAG,GAAG,EAAE;AACxE,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,QAAsB;AAC3B,SAAK,aAAa,MAAM;AACxB,SAAK,SAAS,GAAG,MAAM,GAAG,KAAK,MAAM;AACrC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAwB;AACtB,SAAK,SAAS,KAAK,OAAO,QAAQ,IAAI,OAAO,GAAG,QAAQ,KAAK,MAAM,CAAC,GAAG,GAAG,EAAE;AAC5E,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,WAAyB;AAC3B,SAAK,gBAAgB;AACrB,SAAK,SAAS,GAAG,KAAK,MAAM,IAAI,UAAU,QAAQ,OAAO,EAAE,CAAC;AAC5D,WAAO;AAAA,EACT;AAAA,EAEA,WAAW;AACT,WAAO,KAAK;AAAA,EACd;AACF;","names":[]}