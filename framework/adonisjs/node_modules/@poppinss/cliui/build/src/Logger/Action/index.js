"use strict";
/*
 * @poppinss/utils
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Action = void 0;
/**
 * Exposes the API to print actions in one of the following three states
 *
 * - failed
 * - succeeded
 * - skipped
 */
class Action {
    constructor(label, logger) {
        this.label = label;
        this.logger = logger;
    }
    /**
     * Returns the label
     */
    getLabel(label, color) {
        if (!this.logger.options.colors) {
            return `${label.toUpperCase()}:`;
        }
        return `${this.logger.colors[color](`${label.toUpperCase()}:`)}`;
    }
    formatMessage(message) {
        if (this.logger.options.dim) {
            return this.logger.colors.dim(message);
        }
        return message;
    }
    /**
     * Define a custom renderer. Logs to "stdout" and "stderr"
     * by default
     */
    useRenderer(renderer) {
        this.logger.useRenderer(renderer);
        return this;
    }
    /**
     * Mark action as successful
     */
    succeeded(message) {
        const label = this.getLabel(this.label, 'green');
        this.logger.log(this.formatMessage(`${label} ${message}`));
    }
    /**
     * Mark action as skipped
     */
    skipped(message, skipReason) {
        let logMessage = this.formatMessage(`${this.getLabel('skip', 'cyan')}   ${message}`);
        if (skipReason) {
            logMessage = `${logMessage} ${this.logger.colors.dim(`(${skipReason})`)}`;
        }
        this.logger.log(logMessage);
    }
    /**
     * Mark action as failed
     */
    failed(message, errorMessage) {
        let logMessage = this.formatMessage(`${this.getLabel('error', 'red')}  ${message}`);
        this.logger.logError(`${logMessage} ${this.logger.colors.dim(`(${errorMessage})`)}`);
    }
}
exports.Action = Action;
