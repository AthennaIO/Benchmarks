"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseDriver = void 0;
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
class BaseDriver {
    constructor(application) {
        this.application = application;
        /**
         * Path to the output public dir. Defaults to `/public/assets`
         */
        this.publicPath = this.application.publicPath('assets');
    }
    /**
     * Reads the file contents as JSON
     */
    readFileAsJSON(filePath) {
        if (!(0, fs_extra_1.pathExistsSync)(filePath)) {
            throw new Error(`Cannot find "${filePath}" file. Make sure you are compiling assets`);
        }
        return JSON.parse((0, fs_extra_1.readFileSync)(filePath, 'utf-8'));
    }
    /**
     * Returns the manifest contents as object
     */
    manifest() {
        /**
         * Use in-memory cache when exists
         */
        if (this.manifestCache) {
            this.application.logger.trace('reading manifest from cache');
            return this.manifestCache;
        }
        const manifest = this.readFileAsJSON((0, path_1.join)(this.publicPath, 'manifest.json'));
        this.application.logger.trace('reading manifest from %s', this.publicPath);
        /**
         * Cache manifest in production to avoid re-reading the file from disk
         */
        if (this.application.inProduction) {
            this.manifestCache = manifest;
        }
        return manifest;
    }
    /**
     * Returns the entrypoints contents as object
     */
    entryPoints() {
        /**
         * Use in-memory cache when exists
         */
        if (this.entrypointsCache) {
            this.application.logger.trace('reading entrypoints from cache');
            return this.entrypointsCache;
        }
        const entryPoints = this.readFileAsJSON((0, path_1.join)(this.publicPath, 'entrypoints.json'));
        this.application.logger.trace('reading entrypoints from %s', this.publicPath);
        /**
         * Cache entrypoints file in production to avoid re-reading the file from disk
         */
        if (this.application.inProduction) {
            this.entrypointsCache = entryPoints.entrypoints || {};
        }
        return entryPoints.entrypoints || {};
    }
}
exports.BaseDriver = BaseDriver;
