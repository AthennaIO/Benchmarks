"use strict";
/*
 * @adonisjs/validator
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@poppinss/utils");
/**
 * Provider to register validator with the IoC container
 */
class ValidationProvider {
    constructor(app) {
        this.app = app;
    }
    /**
     * Configures validator with the user defined options. We need to
     * resolve the imported reporter (when defined)
     */
    async configureValidator() {
        const Config = this.app.container.resolveBinding('Adonis/Core/Config');
        const { validator } = this.app.container.resolveBinding('Adonis/Core/Validator');
        /**
         * Resolve reporter when defined
         */
        const validatorConfig = Object.assign({}, Config.get('app.validator'));
        if (validatorConfig.reporter) {
            validatorConfig.reporter = (0, utils_1.esmResolver)(await validatorConfig.reporter());
        }
        validator.configure(validatorConfig);
        return validator;
    }
    /**
     * Register validator
     */
    register() {
        this.app.container.singleton('Adonis/Core/Validator', () => {
            const { validator } = require('../src/Validator');
            return {
                ValidationException: require('../src/ValidationException').ValidationException,
                validator: validator,
                schema: require('../src/Schema').schema,
                rules: require('../src/Rules').rules,
            };
        });
    }
    async boot() {
        const validator = await this.configureValidator();
        this.app.container.withBindings(['Adonis/Core/Request'], (Request) => {
            require('../src/Bindings/Request').default(Request, validator.validate, validator.config);
        });
    }
}
exports.default = ValidationProvider;
ValidationProvider.needsApplication = true;
