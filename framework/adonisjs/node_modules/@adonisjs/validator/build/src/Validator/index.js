"use strict";
/*
 * @adonisjs/validator
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validator = void 0;
const tmp_cache_1 = __importDefault(require("tmp-cache"));
const Schema_1 = require("../Schema");
const Compiler_1 = require("../Compiler");
const Rules_1 = require("../Rules");
const MessagesBag_1 = require("../MessagesBag");
const validations = __importStar(require("../Validations"));
const helpers_1 = require("./helpers");
const ErrorReporter_1 = require("../ErrorReporter");
/**
 * The compiled output runtime helpers
 */
const HELPERS = { exists: helpers_1.exists, isObject: helpers_1.isObject };
/**
 * Helpers that has strict checking for non-existing values
 */
const STRICT_HELPERS = { exists: helpers_1.existsStrict, isObject: helpers_1.isObject };
/**
 * Cache to store the compiled schemas
 */
const COMPILED_CACHE = new tmp_cache_1.default(100);
/**
 * An object of messages to use as fallback, when no custom
 * messages are defined.
 */
const NOOP_MESSAGES = {};
/**
 * An object of refs to use as fallback, when no custom
 * refs are defined.
 */
const NOOP_REFS = {};
/**
 * Default messages
 */
let DEFAULT_MESSAGES;
/**
 * Global options for the validator
 */
const OPTIONS = {
    bail: false,
    existsStrict: false,
    reporter: ErrorReporter_1.VanillaErrorReporter,
    negotiator: helpers_1.getRequestReporter,
};
/**
 * Performs validation on the validator node
 */
const validate = (validator) => {
    /**
     * The reporter to use. Defaults to the [[VanillaErrorReporter]]
     */
    let Reporter = validator.reporter || OPTIONS.reporter;
    /**
     * Whether or not fail on the first error message
     */
    const bail = validator.bail !== undefined ? validator.bail : OPTIONS.bail;
    /**
     * Merge default messages with the validator messages
     */
    let messages = validator.messages || NOOP_MESSAGES;
    if (DEFAULT_MESSAGES) {
        messages = { ...DEFAULT_MESSAGES, ...messages };
    }
    /**
     * Reporter instance
     */
    const reporter = new Reporter(new MessagesBag_1.MessagesBag(messages), bail);
    /**
     * The helpers to use
     */
    const helpers = (validator.existsStrict !== undefined ? validator.existsStrict : OPTIONS.existsStrict) === true
        ? STRICT_HELPERS
        : HELPERS;
    /**
     * Compile everytime, when no cache is defined
     */
    if (!validator.cacheKey) {
        return new Compiler_1.Compiler(validator.schema.tree).compile()(validator.data, validations, reporter, helpers, validator.refs || NOOP_REFS);
    }
    /**
     * Look for compiled function or compile one
     */
    let compiledFn = COMPILED_CACHE.get(validator.cacheKey);
    if (!compiledFn) {
        compiledFn = new Compiler_1.Compiler(validator.schema.tree).compile();
        COMPILED_CACHE.set(validator.cacheKey, compiledFn);
    }
    /**
     * Execute compiled function
     */
    return compiledFn(validator.data, validations, reporter, helpers, validator.refs || NOOP_REFS);
};
/**
 * Extend validator by adding a new rule
 */
const addRule = (name, ruleDefinition) => {
    process.emitWarning('DeprecationWarning', '"validator.addRule" has been depreciated. Use "validate.rule" instead');
    Rules_1.rules[name] = (0, Rules_1.getRuleFn)(name);
    validations[name] = ruleDefinition;
};
/**
 * Add a new type
 */
const addType = (name, typeDefinition) => {
    process.emitWarning('DeprecationWarning', '"validator.addType" has been depreciated. Use "validate.type" instead');
    type(name, typeDefinition);
};
/**
 * Add a new type
 */
const type = (name, typeDefinition) => {
    Schema_1.schema[name] = typeDefinition;
};
/**
 * Define a custom validation rule. This method must be used
 * over `addRule`
 */
const rule = (name, validateFn, compileFn, restrictForTypes) => {
    /**
     * Adding to the rules object, so that one can reference the method. Also
     * interface of rules list has to be extended seperately.
     */
    Rules_1.rules[name] = (0, Rules_1.getRuleFn)(name);
    validations[name] = {
        compile: (0, helpers_1.wrapCompile)(name, restrictForTypes, compileFn),
        validate: validateFn,
    };
};
/**
 * Module available methods/properties
 */
exports.validator = {
    addRule,
    addType,
    validate,
    rule,
    type,
    helpers: {
        exists: helpers_1.exists,
        isRef: helpers_1.isRef,
        existsStrict: helpers_1.existsStrict,
        getFieldValue: helpers_1.getFieldValue,
        resolveAbsoluteName: helpers_1.resolveAbsoluteName,
    },
    messages: (callback) => {
        DEFAULT_MESSAGES = callback();
        OPTIONS.messages = callback;
    },
    config: OPTIONS,
    configure: (config) => {
        DEFAULT_MESSAGES = {};
        Object.assign(OPTIONS, config);
    },
    negotiator: (callback) => {
        OPTIONS.negotiator = callback;
    },
    reporters: {
        api: ErrorReporter_1.ApiErrorReporter,
        jsonapi: ErrorReporter_1.JsonApiErrorReporter,
        vanilla: ErrorReporter_1.VanillaErrorReporter,
    },
};
