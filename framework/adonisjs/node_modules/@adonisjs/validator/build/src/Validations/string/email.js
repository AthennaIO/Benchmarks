"use strict";
/*
 * @adonisjs/validator
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.email = void 0;
const normalizeEmail_1 = __importDefault(require("validator/lib/normalizeEmail"));
const isEmail_1 = __importDefault(require("validator/lib/isEmail"));
const helpers_1 = require("../../Validator/helpers");
const RULE_NAME = 'email';
const DEFAULT_MESSAGE = 'email validation failed';
/**
 * Validation signature for the "email" regex. Non-string values are
 * ignored.
 */
exports.email = {
    compile: (0, helpers_1.wrapCompile)(RULE_NAME, ['string'], (args) => {
        const options = Object.assign({
            domainSpecificValidation: false,
            allowIpDomain: false,
            ignoreMaxLength: false,
            sanitize: false,
        }, args[0]);
        /**
         * Compute sanitization options
         */
        let sanitizationOptions;
        if (options.sanitize) {
            sanitizationOptions = {};
            process.emitWarning('DeprecationWarning', 'email.sanitize options are deprecated. Instead use "rules.normalizeEmail" method');
            if (options.sanitize === true) {
                sanitizationOptions = {};
            }
            else if ((0, helpers_1.isObject)(options.sanitize)) {
                if (typeof options.sanitize.lowerCase === 'boolean') {
                    sanitizationOptions.all_lowercase = options.sanitize.lowerCase;
                }
                if (typeof options.sanitize.removeDots === 'boolean') {
                    sanitizationOptions.gmail_remove_dots = options.sanitize.removeDots;
                }
                if (typeof options.sanitize.removeSubaddress === 'boolean') {
                    Object.assign(sanitizationOptions, {
                        gmail_remove_subaddress: options.sanitize.removeSubaddress,
                        outlookdotcom_remove_subaddress: options.sanitize.removeSubaddress,
                        yahoo_remove_subaddress: options.sanitize.removeSubaddress,
                        icloud_remove_subaddress: options.sanitize.removeSubaddress,
                    });
                }
            }
        }
        return {
            compiledOptions: {
                allow_display_name: options.allowDisplayName,
                require_display_name: options.requireDisplayName,
                allow_utf8_local_part: options.allowUtf8LocalPart,
                require_tld: options.requireTld,
                ignore_max_length: options.ignoreMaxLength,
                allow_ip_domain: options.allowIpDomain,
                domain_specific_validation: options.domainSpecificValidation,
                sanitize: sanitizationOptions,
            },
        };
    }),
    validate(value, compiledOptions, { errorReporter, arrayExpressionPointer, pointer, mutate }) {
        /**
         * Ignore non-string values. The user must apply string rule
         * to validate string.
         */
        if (typeof value !== 'string') {
            return;
        }
        /**
         * Invalid email
         */
        if (!(0, isEmail_1.default)(value, compiledOptions)) {
            errorReporter.report(pointer, RULE_NAME, DEFAULT_MESSAGE, arrayExpressionPointer);
            return;
        }
        /**
         * Apply lower case sanitization
         */
        if ((0, helpers_1.isObject)(compiledOptions.sanitize)) {
            mutate((0, normalizeEmail_1.default)(value, compiledOptions.sanitize));
        }
    },
};
