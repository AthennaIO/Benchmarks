"use strict";
/*
 * @adonisjs/validator
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ip = void 0;
const isIP_1 = __importDefault(require("validator/lib/isIP"));
const helpers_1 = require("../../Validator/helpers");
const RULE_NAME = 'ip';
const DEFAULT_MESSAGE = 'ip validation failed';
/**
 * Validation signature for the "ip" regex. Non-string values are
 * ignored.
 */
exports.ip = {
    compile: (0, helpers_1.wrapCompile)(RULE_NAME, ['string'], ([options]) => {
        let version = options && options.version;
        if (version && typeof version === 'string') {
            version = Number(version);
        }
        return {
            compiledOptions: {
                version: version,
            },
        };
    }),
    validate(value, compiledOptions, { errorReporter, arrayExpressionPointer, pointer }) {
        /**
         * Ignore non-string values. The user must apply string rule
         * to validate string
         */
        if (typeof value !== 'string') {
            return;
        }
        if (!(0, isIP_1.default)(value, compiledOptions.version)) {
            errorReporter.report(pointer, RULE_NAME, DEFAULT_MESSAGE, arrayExpressionPointer);
        }
    },
};
