import type { ScryptConfig, ScryptContract } from '@ioc:Adonis/Core/Hash';
/**
 * Hash driver built on top of scrypt hashing algorithm. The driver adheres
 * to `phc` string format.
 */
export declare class Scrypt implements ScryptContract {
    private readonly config;
    /**
     * A list of ids to find if hash belongs to this driver
     * or not.
     */
    ids: ScryptContract['ids'];
    /**
     * A list of params encoded to the hash value.
     */
    params: ScryptContract['params'];
    constructor(config: ScryptConfig);
    /**
     * Hash a value using scrypt algorithm. The options can be used to override
     * default settings.
     */
    make(value: string): Promise<any>;
    /**
     * Verifies the hash against a plain value to find if it's
     * a valid hash or not. The hash must be a valid `phc` string
     */
    verify(hashedValue: string, plainValue: string): Promise<boolean>;
    /**
     * Returns a boolean telling if hash needs a rehash. Returns true when
     * one of the original params have been changed.
     */
    needsReHash(hashedValue: string): boolean;
}
