"use strict";
/*
 * @adonisjs/logger
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FakeLogger = void 0;
const Logger_1 = require("./Logger");
/**
 * Fake logger that sets a custom logger stream and returns
 * the log messages as an array vs writing them to `stdout`.
 */
class FakeLogger extends Logger_1.Logger {
    constructor(config, pino) {
        /**
         * Config is only used when we are not receiving an
         * existing instance of pino.
         */
        if (!pino) {
            const cloned = Object.assign({}, config, {
                prettyPrint: false,
                stream: {
                    logs: [],
                    write: function writer(line) {
                        const log = JSON.parse(line);
                        delete log.timestamp;
                        this.logs.push(log);
                    },
                },
            });
            super(cloned);
        }
        else {
            super(config, pino);
        }
    }
    /**
     * An array of in-memory logs
     */
    get logs() {
        return this.config.stream.logs;
    }
    /**
     * Returns the child fake logger. All logs from the child
     * are writte to the same top level stream
     */
    child(bindings) {
        if (!this.config.enabled) {
            return this;
        }
        return new FakeLogger(this.config, this.pino.child(bindings));
    }
    /**
     * Clear in-memory logs
     */
    clear() {
        ;
        this.config.stream.logs = [];
    }
}
exports.FakeLogger = FakeLogger;
